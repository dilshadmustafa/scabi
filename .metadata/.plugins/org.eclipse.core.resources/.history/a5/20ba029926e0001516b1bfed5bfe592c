/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 29-Feb-2016
 * File Name : DRangeRunner.java
 */
package com.dilmus.dilshad.scabi.client.async;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeoutException;

import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.client.DComputeRun;
import com.dilmus.dilshad.scabi.common.DMJson;
import com.dilmus.dilshad.scabi.common.DScabiException;

/**
 * @author Dilshad Mustafa
 *
 */
public class DRangeRunner implements Runnable {

	private final Logger log = LoggerFactory.getLogger(DRangeRunner.class);
	private DComputeAsync m_compute = null;
	private List<DComputeAsyncRun> m_localCRunList = null;
	private int m_startCRun = 0;
	private int m_endCRun = 0;
	
	public int getStartCRun() {
		return m_startCRun;
	}
	
	public int getEndCRun() {
		return m_endCRun;
	}
	
	public DRangeRunner(DComputeAsync compute, int startCRun, int endCRun) throws DScabiException {
		if (startCRun > endCRun)
			throw new DScabiException("startCRun > endCRun", "RRR.RRR.1");
		m_compute = compute;
		m_startCRun = startCRun;
		m_endCRun = endCRun;
		m_localCRunList = new ArrayList<DComputeAsyncRun>();
		synchronized(m_compute) {
			List<DComputeAsyncRun> crunList = compute.getCRunList();
			m_localCRunList.addAll(crunList);
		}
		if (startCRun >= m_localCRunList.size())
			throw new DScabiException("startCRun >= m_localCRunList.size()", "RRR.RRR.2");
		if (endCRun >= m_localCRunList.size())
			throw new DScabiException("endCRun >= m_localCRunList.size()", "RRR.RRR.3");
		
	}

	@Override
	public void run() {
		String result = null;
		
		for (int i = m_startCRun; i <= m_endCRun; i++ ) {
			DComputeAsyncRun crun = m_localCRunList.get(i);
			try {
				DComputeNoBlock cnb = crun.getComputeNB();
				
				crun.run();
			}
			catch (Error | RuntimeException e) {
				//e.printStackTrace();
				//throw e;
				result = DMJson.error(e.toString());
				DComputeAsyncConfig config = crun.getConfig();
				synchronized (config) {
					config.setResult(crun.getSU(), result);
				}
				
		    } catch (Exception e) {
		        //e.printStackTrace();
		        //throw new RuntimeException(e);
		        result = DMJson.error(e.toString());
				DComputeAsyncConfig config = crun.getConfig();
				synchronized (config) {
					config.setResult(crun.getSU(), result);
				}

		    } catch (Throwable e) {
		    	//e.printStackTrace();
		        //throw new RuntimeException(e);
		        result = DMJson.error(e.toString());
				DComputeAsyncConfig config = crun.getConfig();
				synchronized (config) {
					config.setResult(crun.getSU(), result);
				}

		    }
		}
				
		HttpResponse httpResponse = null;
		
		for (int i = m_startCRun; i <= m_endCRun; i++ ) {
			DComputeAsyncRun crun = m_localCRunList.get(i);
			Future<HttpResponse> futureHttpResponse = crun.getFutureHttpResponse();
			if (futureHttpResponse != null) {
				try {
					httpResponse = DComputeNoBlock.get(futureHttpResponse);
					result = DComputeNoBlock.getResult(httpResponse);
					log.debug("run() result : {}", result);
					
				} catch (InterruptedException | ExecutionException | TimeoutException | ParseException | IOException e) {
					//e.printStackTrace();
					result = DMJson.error(e.toString());
				}
				
				DComputeAsyncConfig config = crun.getConfig();
				synchronized (config) {
					config.setResult(crun.getSU(), result);
				}
					
			}
					
		}
		
	}
	
}
