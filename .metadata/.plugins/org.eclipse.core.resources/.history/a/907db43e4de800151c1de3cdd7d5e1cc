import java.util.HashMap;
import java.util.Set;

import com.dilmus.dilshad.scabi.client.DComputeUnit;
import com.dilmus.dilshad.scabi.client.DMeta;
import com.dilmus.dilshad.scabi.client.Dson;
import com.dilmus.dilshad.scabi.client.async.DComputeAsync;

/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 08-Mar-2016
 * File Name : Example1_2.java
 */

/**
 * @author Dilshad Mustafa
 *
 */
public class Example1_2 {

	   public static void main(String[] args) throws Exception {

		   /* The examples below use DComputeAsync class which internally uses asynchronous non-blocking network I/O
		    * and can submit very large number of split jobs / Compute Units
		    *  
		    */
	    	System.out.println("Example1_2");

	    	DMeta meta = new DMeta("localhost", "5000");
	     	DComputeAsync c = new DComputeAsync(meta);

	     	
	     	// The below example show how to add additional Java libraries, jar files
	     	// and shows how to use the classes inside the Compute Unit
	     	// shows addJar() method
	     	Dson jsonInput = new Dson();
	     	jsonInput.add("NumberToCheck", "993960000099397");

	     	DComputeUnit cu2 = new DComputeUnit() {
	     		public String compute(Dson jsonInput) {
	     			MyPrimeCheckUnit cu = new MyPrimeCheckUnit();
	     			return cu.compute(jsonInput);
	     		}
	     	};
	     	HashMap<String, String> out5 = new HashMap<String, String>();
	     	System.out.println("Submitting cu2 Compute Unit through executeObject() to Cluster for execution");
	     	c.addJar("/home/anees/self/MyPrimeCheckUnit.jar"); // Add Java libraries, jar files like this
	     	c.executeObject(cu2).input(jsonInput).split(1).output(out5);
	     	c.perform();
	     	c.finish();

	        if (out5.isEmpty())
	     		System.out.println("out5 is empty");
	     	Set<String> st5 = out5.keySet();
	     	for (String s : st5) {
	     		System.out.println("out5 for s : " + s + " value : " + out5.get(s));
	     	}
 			     	
	     	// The below example shows executeObject() method to submit a Compute Unit. The Compute Unit will internally submit 
	     	// its own Compute Units / split jobs for execution in the Cluster
	     	DComputeUnit cu3 = new DComputeUnit() {
	     		public String compute(Dson jsonInput) {
	    	    	try {
		     			DMeta meta = new DMeta("localhost", "5000");
		    	     	DComputeAsync c = new DComputeAsync(meta);
		    	     	HashMap<String, String> myout = new HashMap<String, String>();
		    	     	//System.out.println("jsonInput.toString() : " + jsonInput.toString());
		    	     
		    	     	c.executeClass(MyPrimeCheckUnit.class).input(jsonInput.getInput()).split(1).output(myout);
		    	     	c.perform();
		    	     	c.finish();
		    	     	return myout.toString();
	    	    	} catch (Exception e) {
	    	    		return e.toString();
	    	    	}
	     			
	     		}
	     	};
	     	HashMap<String, String> out6 = new HashMap<String, String>();
	     	System.out.println("Submitting cu3 Compute Unit through executeObject() to Cluster for execution");
	     	c.addJar("/home/anees/self/MyPrimeCheckUnit.jar"); // Add Java libraries, jar files like this
	     	c.executeObject(cu3).input(jsonInput).split(1).output(out6);
	     	c.perform();
	     	c.finish();

	        if (out6.isEmpty())
	     		System.out.println("out6 is empty");
	     	Set<String> st6 = out6.keySet();
	     	for (String s : st6) {
	     		System.out.println("out6 for s : " + s + " value : " + out6.get(s));
	     	}
	     	
	     	// The below example shows how to add jar files, java libraries to Compute Units submitted from
	     	// within Compute Unit cu4.
	     	// CUs are run inside Compute Servers. jar file paths provided by User are not available inside Compute Servers
	     	// Use addComputeUnitJars() method to add all the jar files provided to this Compute Unit cu4 by User.

	     	
	     	DComputeUnit cu4 = new DComputeUnit() {
	     		public String compute(Dson jsonInput) {
	    	    	try {
		     			DMeta meta = new DMeta("localhost", "5000");
		    	     	DComputeAsync c = new DComputeAsync(meta);
		    	     	HashMap<String, String> myout = new HashMap<String, String>();
		    	     	//System.out.println("jsonInput.toString() : " + jsonInput.toString());
		    	     	
		    	     	// If the class is under a package, use fully qualified class name new A.B() inside action string
		    	     	// or append "import A.B;" first to the action string
		    	        String action =	"p = new MyPrimeCheckUnit();" +
		    	        				"return p.compute(jsonInput);";

		    	     	c.addComputeUnitJars();
		    	     	c.executeCode(action).input(jsonInput.getInput()).split(1).output(myout);
		    	     	c.perform();
		    	     	c.finish();
		    	     	return myout.toString();
	    	    	} catch (Exception e) {
	    	    		return e.toString();
	    	    	}
	     			
	     		}
	     	};
	     	HashMap<String, String> out7 = new HashMap<String, String>();
	     	System.out.println("Submitting cu4 Compute Unit through executeObject() to Cluster for execution");
	     	c.addJar("/home/anees/self/MyPrimeCheckUnit.jar"); // Add Java libraries, jar files like this
	     	c.executeObject(cu4).input(jsonInput).split(1).output(out7);
	     	c.perform();
	     	c.finish();

	        if (out7.isEmpty())
	     		System.out.println("out7 is empty");
	     	Set<String> st7 = out7.keySet();
	     	for (String s : st7) {
	     		System.out.println("out7 for s : " + s + " value : " + out7.get(s));
	     	}
	     	*/

	     	meta.close();
	   }

}
