/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 24-Feb-2016
 * File Name : ComputeThread.java
 */
package com.dilmus.dilshad.scabi.client;


import java.io.IOException;

import org.apache.http.ParseException;
import org.apache.http.ProtocolException;
import org.apache.http.client.ClientProtocolException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.common.DScabiException;

/**
 * @author Dilshad Mustafa
 *
 */
public class ComputeRun implements Runnable {

	private final Logger log = LoggerFactory.getLogger(ComputeRun.class);
	private ComputeConfig m_config = null;
	private ComputeSync m_computeSync = null;
	private boolean m_isDone = false;
	private boolean m_isError = false;
	private boolean m_isRetrySubmitted = false;
	private boolean m_isRunOnce = false;
	
	private boolean m_isExecutionError = false;
	
	private int m_TU = 0;
	private int m_SU = 0;
	private int m_retriesTillNow = 0;
	private int m_maxRetry = 0;
	
	public ComputeRun() {
		m_config = null;
		m_computeSync = null;

		m_isDone = false;
		m_isError = false;
		m_isRetrySubmitted = false;
		m_isRunOnce = false;
		
		m_isExecutionError = false;
	}
	
	public int setTU(int totalUnits) {
		m_TU = totalUnits;
		return 0;
	}

	public int setSU(int splitno) {
		m_SU = splitno;
		return 0;
	}
	
	public int setMaxRetry(int maxRetry) {
		m_maxRetry = maxRetry;
		return 0;
	}

	public int getTU() {
		return m_TU;
	}

	public int getSU() {
		return m_SU;
	}
	
	public int getMaxRetry() {
		return m_maxRetry;
	}
	
	public int getRetriesTillNow() {
		return m_retriesTillNow;
	}

	public boolean isError() {
		return m_isError;
	}
	
	public boolean isDone() {
		return m_isDone;
	}

	public boolean isRunOnce() {
		return m_isRunOnce;
	}
	
	public int setComputeSync(ComputeSync computeSync) {
		m_computeSync = computeSync;
		return 0;
	}

	public int setConfig(ComputeConfig config) {
		m_config = config;
		return 0;
	}
	
	public int setRetrySubmitStatus(boolean status) {
		m_isRetrySubmitted = status;
		return 0;
	}
	
	public boolean isRetrySubmitted() {
		return m_isRetrySubmitted;
	}
	
	public int setExecutionError(String errorMessage) {
		m_isExecutionError = true;
		synchronized (m_config) {
			m_config.setResult(m_SU, errorMessage);
		}
		return 0;
	}
	
	public boolean isExecutionError() {
		return m_isExecutionError;
	}
	
	public int setDone(boole)
	
	/* Not used. Previous working version without retry mechanism
	public void run() {
		try {
			Thread.sleep(10000);	
		} catch (Exception e) { 
			
		}
		if (null == m_config) {
			//throw new DScabiException("config is not set", "CRN.RUN.1");
			log.debug("config is not set");
		}
		if (null == m_computeSync) {
			//throw new DScabiException("computeSync is not set", "CRN.RUN.1");
			log.debug("computeSync is not set");
		}
		synchronized (m_computeSync) {
		
			try {
				if (ComputeConfig.OBJECT == m_config.getConfigType()) {
					log.debug("Executing Object");
					m_computeSync.executeObject(m_config.getComputeUnit());
				}
			} catch (Exception e) {
				log.debug("Exception : {}", e.toString());
			}
		
		}
		
	}
	*/
	
	public void doRun() throws IOException, DScabiException {
		
		if (null == m_config) {
			// Not used throw new DScabiException("config is not set", "CRN.RUN.1");
			log.debug("doRun() config is not set");
			return;
		}
		if (null == m_computeSync) {
			// Not used throw new DScabiException("computeSync is not set", "CRN.RUN.1");
			log.debug("doRun() computeSync is not set");
			return;
		}
		
		int splitno = m_SU;
		log.debug("doRun() splitno : {}", splitno);
		String result = null;
		try {
			if (ComputeConfig.OBJECT == m_config.getConfigType()) {
				log.debug("doRun() Executing for Object");
				result = m_computeSync.executeObject(m_config.getComputeUnit());
				log.debug("result is : {}", result);
			} else if (ComputeConfig.CLASS == m_config.getConfigType()){
				log.debug("doRun() Executing for Class");
				result = m_computeSync.executeClass(m_config.getComputeClass());
				log.debug("result is : {}", result);
				
			} else if (ComputeConfig.CODE == m_config.getConfigType()){
				log.debug("doRun() Executing for Code");
				result = m_computeSync.executeCode(m_config.getComputeCode());
				log.debug("result is : {}", result);
			} else {
				throw new DScabiException("Unknown ComputeConfig type m_config.getConfigType() " + m_config.getConfigType(), "CRN.DRN.1");
			}
			
			synchronized (m_config) {
				log.debug("doRun() Setting result for splitno : {}", splitno);
				m_config.setResult(splitno, result);
				// Not used m_config.setSplitStatus(splitno, true);
				// Not used m_config.incIfExistsFailedSplitRetryMap(splitno);
			}
				
		} catch (ClientProtocolException e) {
			log.debug("doRun() Exception : {}", e.toString());
			// m_computeSync is faulty only in the case of ClientProtocolException/NetworkException
			m_computeSync.setFaulty(true);
				
			synchronized (m_config) {
				// Not used m_config.setOrIncFailedSplitRetryMap(splitno);
				// Not used m_config.setSplitStatus(splitno, false);
				m_config.setResult(splitno, e.toString());
			}
			// m_isError is set only in the case of network exception
			// only in this case retry has to be attempted if maxRetry > 0 is set by User
			m_isError = true; 
		}
		
	}

	public void run() {
		m_isDone = false;
		if (true == m_isError)
			m_retriesTillNow = m_retriesTillNow + 1;
		m_isError = false;
		synchronized (m_computeSync) {
			try {
				m_computeSync.setTU(m_TU);
				m_computeSync.setSU(m_SU);

		        doRun();
		    } catch (Throwable e) {
				log.debug("run() Throwable : {}", e.toString());
				// m_computeSync is faulty only in the case of ClientProtocolException/NetworkException which 
				// is already handled in doRun() method
				// // // m_computeSync.setFaulty(true);
				
				// TODO: check later, low priority, whether to use m_SU
				int splitno = m_computeSync.getSU(); // just to be exact, getting SU directly from m_computeSync
				log.debug("run() m_computeSync.getSU() : {}", splitno);
				
				synchronized (m_config) {
					// Not used m_config.setOrIncFailedSplitRetryMap(splitno);
					// Not used m_config.setSplitStatus(splitno, false);
					m_config.setResult(splitno, e.toString());
				}
	        	
		    }
			
		}
		m_isDone = true;
		m_isRetrySubmitted = false;
		if (false == m_isRunOnce) {
			m_isRunOnce = true;
		}
	}
	
}
