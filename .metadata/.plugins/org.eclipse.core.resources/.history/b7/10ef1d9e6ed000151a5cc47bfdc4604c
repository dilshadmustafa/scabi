/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 07-Feb-2016
 * File Name : Dfile.java
 */
package com.dilmus.scabi.client;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.scabi.common.DJsonHelper;
import com.dilmus.scabi.common.DScabiException;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.gridfs.GridFSBucket;
import com.mongodb.client.gridfs.GridFSBuckets;
import com.mongodb.client.gridfs.GridFSDownloadStream;
import com.mongodb.client.gridfs.GridFSUploadStream;
import com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions;
import com.mongodb.client.gridfs.model.GridFSUploadOptions;

/**
 * @author Dilshad Mustafa
 *
 */
public class Dfile {

	final Logger log = LoggerFactory.getLogger(Dfile.class); 
	private Meta meta = null;
	private CloseableHttpClient httpClient = null;
	private HttpHost metaTarget = null;
	private String metaHost = null;
	private String metaPort = null;
	private Namespace namespace = null;
	private String jsonNamespace = null;
	private boolean firstTime = true;

	private MongoClient mongo = null;
	private MongoDatabase db = null;
    private GridFSBucket gridFSBucket = null;
    private GridFSUploadOptions options = null;

	
    //===========================================
    // File related
    
    // use gridfs inside to put file
    //meta.uploadFile(namespace or jsonNamespace, file name to put, where to read file "/anees/home/testdata/in/App.class");

    // use gridfs inside to put file
    //meta.uploadFileStream(namespace or jsonNamespace, file name to put, where to read file InputStream);

    // use gridfs inside to get file
    //meta.downloadFile(namespace or jsonNamespace, file name to get, where to write file "/home/anees/testdata/out/App.class");

    // use gridfs inside to get file
    //meta.downloadFileStream(namespace or jsonNamespace, file name to get, where to write file OutputStream);

    //===========================================
	
	public Dfile(Meta meta) throws IOException {
		metaHost = meta.getHost();
		metaPort = meta.getPort();
		
		try {
    		httpClient = HttpClientBuilder.create().build();
    		metaTarget = new HttpHost(metaHost, Integer.parseInt(metaPort), "http");
    		this.meta = meta;
    		firstTime = true;
    		
    	} catch (Exception e) {
			e.printStackTrace();
    		if (null == httpClient) 
    			httpClient.close();
    		throw e;
		}
		
	}
	
	public int setNamespace(String strNamespace) throws ParseException, IOException, ScabiClientException {
		namespace = null;
		firstTime = true;
		namespace = getNamespace(strNamespace);
		this.jsonNamespace = namespace.toString();
		return 0;
	}
	
	public int setNamespace(Namespace namespace) {
		firstTime = true;
		this.namespace = namespace;
		this.jsonNamespace = namespace.toString();
		return 0;
	}
	
	public Namespace getNamespace(String strNamespace) throws ParseException, IOException, ScabiClientException {
		String metaType = "File";
		HttpPost postRequest = new HttpPost("/Meta/Namespace/Get");
		String myString = "{ \"Type\" : \"" +  metaType + "\", \"Namespace\" : \"" + strNamespace + "\" }";
	    StringEntity params =new StringEntity(myString);
	    
	    postRequest.addHeader("content-type", "application/json");
	    postRequest.setEntity(params);
	            			
		log.debug("getNamespace() executing request to " + metaTarget + "/Meta/Namespace/Get");

		// works HttpResponse httpResponse = httpClient.execute(target, getRequest);
		HttpResponse httpResponse = httpClient.execute(metaTarget, postRequest);
		HttpEntity entity = httpResponse.getEntity();
	
		log.debug("getNamespace()----------------------------------------");
		log.debug("getNamespace() {}",httpResponse.getStatusLine());
		Header[] headers = httpResponse.getAllHeaders();
		for (int i = 0; i < headers.length; i++) {
			log.debug("getNamespace() {}", headers[i]);
		}
		log.debug("getNamespace()----------------------------------------");

		String jsonString = null;
		if (entity != null) {
			jsonString = EntityUtils.toString(entity);
			log.debug("getNamespace() {}", jsonString);
		}
		
		if (DJsonHelper.isError(jsonString)) {
			throw new ScabiClientException("Unable to get namespace " + strNamespace + " Error message : " + jsonString, "DFE.GNE.1");
		}
		
		Namespace namespace = new Namespace(jsonString);
		return namespace;
		
	}

	public Namespace findOneNamespace() throws ParseException, IOException, ScabiClientException {
		String metaType = "File";
		HttpPost postRequest = new HttpPost("/Meta/Namespace/FindOne");
		String myString = "{ \"Type\" : \"" +  metaType + "\" }";
	    StringEntity params =new StringEntity(myString);
	    
	    postRequest.addHeader("content-type", "application/json");
	    postRequest.setEntity(params);
	            			
		log.debug("findOneNamespace() executing request to " + metaTarget + "/Meta/Namespace/FindOne");

		// works HttpResponse httpResponse = httpClient.execute(target, getRequest);
		HttpResponse httpResponse = httpClient.execute(metaTarget, postRequest);
		HttpEntity entity = httpResponse.getEntity();
	
		log.debug("findOneNamespace()----------------------------------------");
		log.debug("findOneNamespace() {}",httpResponse.getStatusLine());
		Header[] headers = httpResponse.getAllHeaders();
		for (int i = 0; i < headers.length; i++) {
			log.debug("findOneNamespace() {}", headers[i]);
		}
		log.debug("findOneNamespace()----------------------------------------");

		String jsonString = null;
		if (entity != null) {
			jsonString = EntityUtils.toString(entity);
			log.debug("findOneNamespace() {}", jsonString);
		}

		if (DJsonHelper.isError(jsonString)) {
			throw new ScabiClientException("Unable to get namespace. Error message : " + jsonString, "DFE.GNE.1");
		}

		Namespace namespace = new Namespace(jsonString);
		return namespace;
		
	}
	
	public int put(String fileName, String fullFilePath) throws IOException {
		long time1;
		long time2;
		long time3;
		long time4;
		int n = 0;

		if (firstTime) {
			mongo = new MongoClient("localhost", 27017);
			//DB db = mongo.getDB("JFileDB");
			db = mongo.getDatabase("FileDB");
	        gridFSBucket = GridFSBuckets.create(db);
	
	        // Create some custom options
	        options = new GridFSUploadOptions()
	                .chunkSizeBytes(1024*1024)
	                .metadata(new Document("type", "File"));
	        firstTime = false;
		}
		
        // Get the input stream
        time1 = System.currentTimeMillis();
        InputStream streamToUploadFrom = new FileInputStream(fullFilePath);

        byte data[] = new byte[64*1024*1024];
        GridFSUploadStream uploadStream = gridFSBucket.openUploadStream(fileName, options);

        while ((n = streamToUploadFrom.read(data)) > 0) {
            uploadStream.write(data, 0, n);
        }
        uploadStream.close();
        time2 = System.currentTimeMillis();

        System.out.println("The fileId of the uploaded file is: " + uploadStream.getFileId().toHexString());
        System.out.println("Upload time taken : time2 - time1 : " + (time2 - time1));
		
		return 0;
	}

	public int get(String fileName, String fullFilePath) throws IOException {
		long time1;
		long time2;
		int n = 0;

		if (firstTime) {
			mongo = new MongoClient("localhost", 27017);
			//DB db = mongo.getDB("JFileDB");
			db = mongo.getDatabase("FileDB");
	        gridFSBucket = GridFSBuckets.create(db);
	
	        // Create some custom options
	        options = new GridFSUploadOptions()
	                .chunkSizeBytes(1024*1024)
	                .metadata(new Document("type", "File"));
	        firstTime = false;
		}
		
        // Get the input stream
        time1 = System.currentTimeMillis();
        
        /*
         * OpenDownloadStream
         */
        
        Date date = new Date();
        FileOutputStream streamToDownloadTo = new FileOutputStream(fullFilePath + "_" + date.toString());
        GridFSDownloadByNameOptions downloadOptions = new GridFSDownloadByNameOptions().revision(-1);

        GridFSDownloadStream downloadStream = gridFSBucket.openDownloadStreamByName(fileName, downloadOptions);
        //long fileLength = downloadStream.getGridFSFile().getLength();
        byte[] bytesToWriteTo = new byte[64*1024*1024];
        
        while ((n = downloadStream.read(bytesToWriteTo)) > 0) {
        	streamToDownloadTo.write(bytesToWriteTo, 0, n);
        }
        downloadStream.close();

        time2 = System.currentTimeMillis();
        System.out.println("Download time taken : time2 - time1 : " + (time2 - time1));
		
		return 0;
	}

	
}
