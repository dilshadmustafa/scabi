/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 21-Jan-2016
 * File Name : ScabiClient.java
 */

package com.dilmus.scabi.client;

import java.io.IOException;

import org.apache.http.*;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.scabi.common.DScabiException;

/**
 * @author Dilshad Mustafa
 *
 */
public class ScabiClient {

    public static void main(String[] args) throws IOException, ParseException, ScabiClientException, DScabiException, java.text.ParseException {
        System.setProperty("org.slf4j.simpleLogger.showDateTime", "true");
        System.setProperty("org.slf4j.simpleLogger.showThreadName", "true");
        System.setProperty("org.slf4j.simpleLogger.levelInBrackets", "true");       
        System.setProperty("org.slf4j.simpleLogger.dateTimeFormat", "yyyy-MM-dd HH:mm:ss:SSS Z");
  		System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", "debug");		
  		System.setProperty("org.slf4j.simpleLogger.showLogName", "true");		
  		//System.setProperty("org.slf4j.simplelogger.defaultlog", "debug");
    	//System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "DEBUG");
  		final Logger log = LoggerFactory.getLogger(ScabiClient.class);

    	System.out.println("ScabiClient");
        //test2();
    	Meta meta = new Meta("localhost", "4567");
        //meta.validate();
        //Compute c = meta.computeAlloc();
        //log.debug("Compute is {}", c);
        
        //Compute c2 = new Compute(meta);
        //log.debug("Compute is {}", c2);
        
        //Compute c3 = new Compute("{ \"ComputeHost\" : \"localhost\", \"ComputePort\" : \"4568\" }");
        //log.debug("Compute is {}", c3);
        
        // works
        /*
        String action ="DDAO dao = database.createDAO();" +
				"dao.setTableName(\"ComputeMetaDataTable\");" +
				"String jsonQuery = json.json(\"{ <<<Status>>> : <<<Available>>> }\");" +
		   		"String jsonResult = dao.executeQuery(jsonQuery);" +
				"return jsonResult;";
        c.executeBshSource(action);
        */
        
        // works
        //meta.getNamespace("myorg.Meta1");
        //meta.getNamespace("org.dilmus.scabi.Meta3"); // negative test
        
        // works
        //meta.findOneNamespace("MetaThis");
        //meta.findOneNamespace("MetaRemote");
        //meta.findOneNamespace("AppTable");
        //meta.findOneNamespace("JavaFile");
        //meta.findOneNamespace("File");

        //works
        //Namespace name = meta.findOneNamespace("File");
        //log.debug("name details : {} {} {} {} {} {} {}", name.getHost(), name.getPort(), name.getNamespace());
        
        //works
        Dfile f = new Dfile(meta);
        //f.findOneNamespace();
        //f.getNamespace("org.dilmus.scabi.File1");
        //f.setNamespace("org.dilmus.scabi.File1");
        Namespace name = f.findOneNamespace();
        f.setNamespace(name);
        
        //f.put("App8.class", "/home/anees/testdata/in/App8.class");
        //f.get("App8.class", "/home/anees/testdata/out/App8.class");
        
        // 56c5dc0c52aeac1c73e97c90
        // 56c570df52aeac0c592356e0
        // 56c5706952aeac0c33dcdc43
        // 56c56e1452aeac0bac7e6083
        // 
        /*
        f.removeFilesIncompleteMetaData("App8.class", "");
        f.removeFilesIncompleteMetaData("App7.class", "");
        f.removeFilesIncompleteMetaData("App6.class", "");
        f.removeFilesIncompleteMetaData("App5.class", "");
        f.removeFilesIncompleteMetaData("App4.class", "");
        f.removeFilesIncompleteMetaData("App3.class", "");
        f.removeFilesIncompleteMetaData("App2.class", "");
        f.removeFilesIncompleteMetaData("App1.class", "");
        */
        f.removeAllFilesIncompleteMetaData();
        log.
        //===========================================
        // Java File related
        
        // use gridfs inside to put file
        //meta.uploadJavaFile(namespace or jsonNamespace, file name to put, where to read file "/anees/home/testdata/in/App.class");

        // use gridfs inside to put file
        //meta.uploadJavaFileStream(namespace or jsonNamespace, file name to put, where to read file InputStream);

        // use gridfs inside to get file
        //meta.downloadJavaFile(namespace or jsonNamespace, file name to get, where to write file "/home/anees/testdata/out/App.class");

        // use gridfs inside to get file
        //meta.downloadJavaFileStream(namespace or jsonNamespace, file name to get, where to write file OutputStream);
        
        //===========================================
        // Compute related
        
        // compute.executeJarFile(namespace or jsonjsonNamespace, .jar file name to execute, jsonInput)
        // compute.executeJarFile(namespace or jsonjsonNamespace, .jar file name to execute, .class file inside jar, jsonInput)
        // compute.executeClassFile(namespace or jsonjsonNamespace, .class file name to execute, jsonInput)

        //===========================================
        // App Table related
        
        // meta.createTable(namespace or jsonNamespace, table name)
        // meta.insertRow(namespace or jsonNamespace, jsonInsert, jsonCheck)
        // meta.executeQuery(namespace or jsonNamespace, jsonQuery)
        // meta.executeUpdate(namespace or jsonNamespace, jsonUpdate, jsonWhere)
        
        // decide meta.executeQuery(), etc. or client versions of DAO. which one ?
        // DECISION:- don't use meta.executeQuery(), etc. for DB. use client versions DAO, DAOHelper, Json, JsonHelper.
        // and provide client versions of DAO, DAOHelper, Json, JsonHelper. These form part of API 
        // exposed to client.
        
        //===========================================
        // Async Task
        
        // AsyncTask asy = new AsyncTask(Runnable r);
        
    }

    public void test() {
        CloseableHttpClient httpClient;

        // use httpClient (no need to close it explicitly)
    	try {
    		httpClient = HttpClientBuilder.create().build();
    	    // use httpClient (no need to close it explicitly)
    		// specify the host, protocol, and port
    		HttpHost target = new HttpHost("localhost", 4567, "http");
    		
    			// specify the get request
    			// works HttpGet getRequest = new HttpGet("/hello");
    			// /forecastrss?p=80020&u=f
    			/*
    			String myString = "{\"id\":123, \"name\":\"Pankaj Kumar\", \"permanent\":true, \"address\":{ \"street\":\"El Camino Real\"," + 
    	            	"\"city\":\"San Jose\", \"zipcode\":95014 }, \"phoneNumbers\":[9988664422, 1234567890]," +
    					"\"role\":\"Developer\" }";
    			*/
    			//String myString = "{ \"ComputeHost\" : \"localhost\", \"ComputePort\" : \"4568\" }";
    			String myString = "";
    			// {"id":123, "name":"Pankaj Kumar", "permanent":true, "address":{ "street":"El Camino Real","city":"San Jose", "zipcode":95014 }, "phoneNumbers":[9988664422, 1234567890],"role":"Developer" }
    			
    			// HttpPost postRequest = new HttpPost("/hellopost");
    			// HttpPost postRequest = new HttpPost("/Meta/Compute/Register");
    			HttpPost postRequest = new HttpPost("/Meta/Compute/Alloc");
    			
    			// StringEntity params =new StringEntity("details={\"name\":\"myname\",\"age\":\"20\"} ");
    		    StringEntity params =new StringEntity(myString);
    		    
    		    // works postRequest.addHeader("content-type", "application/x-www-form-urlencoded");
    		    postRequest.addHeader("content-type", "application/json");
    		    postRequest.setEntity(params);
    		            			
    			System.out.println("executing request to " + target);
    	
    			// works HttpResponse httpResponse = httpClient.execute(target, getRequest);
    			HttpResponse httpResponse = httpClient.execute(target, postRequest);
    			HttpEntity entity = httpResponse.getEntity();
    		
    			System.out.println("----------------------------------------");
    			System.out.println(httpResponse.getStatusLine());
    			Header[] headers = httpResponse.getAllHeaders();
    			for (int i = 0; i < headers.length; i++) {
    			System.out.println(headers[i]);
    			}
    		System.out.println("----------------------------------------");
    	
    		if (entity != null) {
    			System.out.println(EntityUtils.toString(entity));
    		}
    	
    
    	
    } catch (IOException e) {

        // handle
    	e.printStackTrace();
    }

    finally {
    // When HttpClient instance is no longer needed,
    // shut down the connection manager to ensure
    // immediate deallocation of all system resources
   
    }   
    	
    }

    public static void test2() {
        CloseableHttpClient httpClient;

        // use httpClient (no need to close it explicitly)
    	try {
    		httpClient = HttpClientBuilder.create().build();
    	    // use httpClient (no need to close it explicitly)
    		// specify the host, protocol, and port
    		HttpHost target = new HttpHost("localhost", 8182, "http");
    		
    			// specify the get request
    			// works HttpGet getRequest = new HttpGet("/hello");
    			// /forecastrss?p=80020&u=f
    			/*
    			String myString = "{\"id\":123, \"name\":\"Pankaj Kumar\", \"permanent\":true, \"address\":{ \"street\":\"El Camino Real\"," + 
    	            	"\"city\":\"San Jose\", \"zipcode\":95014 }, \"phoneNumbers\":[9988664422, 1234567890]," +
    					"\"role\":\"Developer\" }";
    			*/
    			String myString = "{ \"ComputeHost\" : \"localhost\", \"ComputePort\" : \"4568\" }";
    			//String myString = "";
    			// {"id":123, "name":"Pankaj Kumar", "permanent":true, "address":{ "street":"El Camino Real","city":"San Jose", "zipcode":95014 }, "phoneNumbers":[9988664422, 1234567890],"role":"Developer" }
    			
    			// HttpPost postRequest = new HttpPost("/hellopost");
    			// HttpPost postRequest = new HttpPost("/Meta/Compute/Register");
    			HttpPost postRequest = new HttpPost("/Meta/Compute/Alloc");
    			
    			// StringEntity params =new StringEntity("details={\"name\":\"myname\",\"age\":\"20\"} ");
    		    StringEntity params =new StringEntity(myString);
    		    
    		    // works postRequest.addHeader("content-type", "application/x-www-form-urlencoded");
    		    postRequest.addHeader("Content-Type", "application/json");
    		    postRequest.setEntity(params);
    		            			
    			System.out.println("executing request to " + target);
    	
    			// works HttpResponse httpResponse = httpClient.execute(target, getRequest);
    			HttpResponse httpResponse = httpClient.execute(target, postRequest);
    			HttpEntity entity = httpResponse.getEntity();
    		
    			System.out.println("----------------------------------------");
    			System.out.println(httpResponse.getStatusLine());
    			Header[] headers = httpResponse.getAllHeaders();
    			for (int i = 0; i < headers.length; i++) {
    			System.out.println(headers[i]);
    			}
    		System.out.println("----------------------------------------");
    	
    		if (entity != null) {
    			System.out.println(EntityUtils.toString(entity));
    		}
    	
    
    	
    } catch (IOException e) {

        // handle
    	e.printStackTrace();
    }

    finally {
    // When HttpClient instance is no longer needed,
    // shut down the connection manager to ensure
    // immediate deallocation of all system resources
   
    }   
    	
    }

    
}
