/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 11-Feb-2016
 * File Name : DBackCollection.java
 */
package com.dilmus.scabi.common;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

import org.bson.BasicBSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MapReduceCommand;
import com.mongodb.MapReduceOutput;
import com.mongodb.WriteResult;

/**
 * @author Dilshad Mustafa
 *
 */
public class DBackTable {

	final static Logger log = LoggerFactory.getLogger(DBackTable.class);
	
	private DBackDB m_ddb = null;
	private DBCollection m_table = null;
	
	private String m_tableName;
	private boolean m_firstTime;
	private ArrayList<String> m_fieldNames;
	
	private DBackCursor m_dcursor = null;
	
	public DBackTable(DBackDB ddb, DBCollection table) {
		m_ddb = ddb;
		m_table = table;
		m_tableName = table.getName();
		m_firstTime = true;
		m_fieldNames = null;
		
		m_dcursor = new DBackCursor();
		
	}

	public DBackTable(DBackDB ddb, String tableName) throws DScabiException {
		m_ddb = null;
		m_table = null;
		m_tableName = null;
		m_firstTime = true;
		m_fieldNames = null;
		
		DB db = ddb.getDB();
		if (false == db.collectionExists(tableName)) {
			throw new DScabiException("Table name doesn't exist : " + tableName, "DBT.DBT.1");
		}
		m_table = db.getCollection(tableName);
		m_tableName = tableName;
		m_ddb = ddb;

		m_dcursor = new DBackCursor();

	}
	
	public DBackTable(DBackDB ddb) {
		m_ddb = ddb;
		m_table = null;
		m_tableName = null;
		m_firstTime = true;
		m_fieldNames = null;

		m_dcursor = new DBackCursor();

	}
	
	public int setTableName(String tableName) throws DScabiException {
		m_tableName = null;
		m_firstTime = true;
		m_fieldNames = null;
		m_table = null;
		
		DB db = m_ddb.getDB();
		if (false == db.collectionExists(tableName)) {
			throw new DScabiException("Table name doesn't exist : " + tableName, "DBT.STN.1");
		}
		m_table = db.getCollection(tableName);
		m_tableName = tableName;
		return 0;
	}
	
	public long count() {
		return m_table.count();
	}

	public ArrayList<String> fieldNames() throws DScabiException {
		if (null == m_tableName) {
			throw new DScabiException("Table name is null", "DBT.FNS.1");
		}
		if (null == m_table) {
			throw new DScabiException("Table is null", "DBT.FNS.2");
		}
		log.debug("fieldNames() firstTime is {}", m_firstTime);
		if (m_table.count() <= 0) {
			log.debug("fieldNames() table.count() is {}", m_table.count());
			return null;
		}
		if (m_firstTime) {
			String map = "function() { for (var key in this) { emit(key, null); } }";
			String reduce = "function(key, stuff) { return null; }";
			
			MapReduceCommand cmd = new MapReduceCommand(m_table, map, reduce,
					   	     null, MapReduceCommand.OutputType.INLINE, null);
			MapReduceOutput out = m_table.mapReduce(cmd);
			//if 4th param output collection name is used above, String s = out.getOutputCollection().distinct("_id").toString();
			//if 4th param output collection name is used above, System.out.println("out.getOutputCollection().distinct " + s);
			m_fieldNames = new ArrayList<String>();
			for (DBObject o : out.results()) {
			    log.debug("fieldNames() Key, value is : {}", o.toString());
			    log.debug("fieldNames() Key name is : {}", o.get("_id").toString());
			    if (o.get("_id").toString().equals("_id") == false)
			    	m_fieldNames.add(o.get("_id").toString());
			}			
			m_firstTime = false;
			return m_fieldNames;
		}
		return m_fieldNames;
	}

	public ArrayList<String> fieldNamesUsingFindOne() throws DScabiException {
		if (null == m_tableName) {
			throw new DScabiException("Table name is null", "DBT.FNU.1");
		}
		if (null == m_table) {
			throw new DScabiException("Table is null", "DBT.FNU.2");
		}
		log.debug("fieldNamesUsingFindOne() firstTime is {}", m_firstTime);
		if (m_table.count() <= 0) {
			log.debug("fieldNamesUsingFindOne() table.count() is {}", m_table.count());
			return null;
		}
		if (m_firstTime) {
			DBObject out = m_table.findOne();
			//if 4th param output collection name is used above, String s = out.getOutputCollection().distinct("_id").toString();
			//if 4th param output collection name is used above, System.out.println("out.getOutputCollection().distinct " + s);
			m_fieldNames = new ArrayList<String>();
			Set<String> st = out.keySet();
			for (String s : st) {
			    log.debug("fieldNamesUsingFindOne() value is : {}", out.get(s));
			    log.debug("fieldNamesUsingFindOne() Key name is : {}", s);
			    if (s.equals("_id") == false)
			    	m_fieldNames.add(s);
			}			
			m_firstTime = false;
			return m_fieldNames;
		}
		return m_fieldNames;
	}

	public DBCollection getCollection() {
		return m_table;
	}

	public DBackCursor find(DBackObject document) {
		DBCursor cursor = m_table.find(document.getDocument());
		m_dcursor.set(cursor);
		return m_dcursor;
	}
	
	public DBackCursor findDirect(DBackObject document) {
		return new DBackCursor(m_table.find(document.getDocument()));
	}

	public DBackObject findOne(DBackObject document) {
		DBObject ob = m_table.findOne(document.getDocument());
		return new DBackObject(ob);
	}
	
	public int insert(DBackObject dob) throws DScabiException {
		WriteResult result = m_table.insert(dob.getDocument());
		log.debug("result is : {}", result.getN());
		if (result.getN() < 0)
			throw new DScabiException("Insert failed for DBackObject : " + dob.toString(), "DBT.INT.1");
		return result.getN();
	}

	public int update(DBackObject dob, DBackObject updateObj) throws DScabiException {
		WriteResult result = m_table.updateMulti(dob.getDocument(), updateObj.getDocument());
		log.debug("result is : {}", result.getN());
		if (result.getN() <= 0)
			throw new DScabiException("Update failed for DBackObject dob : " + dob.toString() + " updateObj : " + updateObj.toString(), "DBT.UPE.1");
		return result.getN();
	}

	public int remove(DBackObject dob) throws DScabiException {
		WriteResult result = m_table.remove(dob.getDocument());
		log.debug("result is : {}", result.getN());
		if (result.getN() <= 0)
			throw new DScabiException("Remove failed for DBackObject : " + dob.toString(), "DBT.REE.1");
		return result.getN();
	}
	
	private boolean isEmpty(ArrayList<String> fieldList) {
		
		if (null == fieldList)
			return true;
		if (fieldList.isEmpty())
			return true;
		return false;
	}

	public int insertRow(String jsonRow, String jsonCheck) throws DScabiException, IOException {

		log.debug("insertRow() firstTime is {}", m_firstTime);
		ArrayList<String> fieldList = fieldNames();
		DJson djson = new DJson(jsonRow);
		Set<String> st = djson.keySet();
		BasicDBObject document = new BasicDBObject();
		int n = 0;
		WriteResult result = null;
		
		DJson djsonCheck = new DJson(jsonCheck);
		Set<String> stCheck = djsonCheck.keySet();
		BasicDBObject documentCheck = new BasicDBObject();
		
		if (false == isEmpty(fieldList)) {
			if (false == fieldList.containsAll(st)) {
		   		throw new DScabiException("One or more field name in jsonRow doesn't exist in fieldNames list. jsonRow : " + jsonRow + " Field Names list : " + fieldList, "DBT.IRW.1");
			}
			if (false == fieldList.containsAll(stCheck)) {
	    		throw new DScabiException("One or more field name in jsonCheck doesn't exist in fieldNames list. jsonCheck : " + jsonCheck + " Field Names list : " + fieldList, "DBT.IRW.2");				
	    	}
			if (false == st.containsAll(fieldList)) {
		   		throw new DScabiException("One or more field name in fieldNames doesn't exist in jsonRow key set. jsonRow : " + jsonRow + " Field Names list : " + fieldList, "DBT.IRW.3");
			}
			if (fieldList.size() != st.size()) {
	    		throw new DScabiException("Fields count doesn't match. fieldNames : " + fieldList.toString() + " with jsonRow : " + jsonRow, "DBT.IRW.4");
			}
		}
		
		if (false == isEmpty(fieldList)) {
			for (String fieldName : st) {
		    	// create a document to store key and value
				String f = djson.getString(fieldName);
				if (null == f) {
		    		throw new DScabiException("Field name " + fieldName + " doesn't exist in jsonRow : " + jsonRow + " Field Names list : " + fieldList, "DBT.IRW.5");
				}
		    	document.put(fieldName, f);
			}

			for (String keyCheck : stCheck) {
		    	// create a document to store key and value				
				String f2 = djsonCheck.getString(keyCheck);
				if (null == f2) {
		    		throw new DScabiException("Field name " + keyCheck + " doesn't exist in jsonCheck : " + jsonCheck, "DBT.IRW.6");
				}
		    	documentCheck.put(keyCheck, f2);
			}
			
	    	DBCursor cursorExist = m_table.find(documentCheck);
	    	n = cursorExist.count();
	    	if (0 == n) {
	    		log.debug("insertRow() Inside 0 == n");
	    		result = m_table.insert(document);
	    		log.debug("result is : {}", result.getN());
	    		if (result.getN() < 0)
	    			throw new DScabiException("Insert failed for document : " + document.toString(), "DBT.IRW.7");
	    	} else if (1 == n) {
	    		throw new DScabiException("Row already exists. jsonCheck : " + jsonCheck, "DBT.IRW.8"); // already found
	    	} else {
	    		throw new DScabiException("Row already exists, multiple matches. jsonCheck : " + jsonCheck, "DDO.IRW.4"); // already found
	    	}
		} else {
			for (String key : st) {
		    	// create a document to store key and value
				String f3 = djson.getString(key);
				if (null == f3) {
		    		throw new DScabiException("Field name " + key + " doesn't exist in jsonRow : " + jsonRow, "DDO.IRW.11");
				}
				document.put(key, djson.getString(key));
			}
			
			for (String keyCheck : stCheck) {
		    	// create a document to store key and value				
				String f4 = djsonCheck.getString(keyCheck);
				if (null == f4) {
		    		throw new DScabiException("Field name " + keyCheck + " doesn't exist in jsonCheck : " + jsonCheck, "DDO.IRW.10");
				}
		    	documentCheck.put(keyCheck, djsonCheck.getString(keyCheck));
			}
			
	    	DBCursor cursorExist = m_table.find(documentCheck);
	    	n = cursorExist.count();
	    	if (0 == n) {
	    		log.debug("insertRow() Inside 0 == n");
		    	result = m_table.insert(document);
	    		log.debug("result is : {}", result.getN());
	    		if (result.getN() < 0)
	    			throw new DScabiException("Insert failed for document : " + document.toString(), "DBT.IRW.11");
	    	} else if (1 == n) {
	    		throw new DScabiException("Row already exists. jsonCheck : " + jsonCheck, "DDO.IRW.5"); // already found
	    	} else {
	    		throw new DScabiException("Row already exists, multiple matches. jsonCheck : " + jsonCheck, "DDO.IRW.6"); // already found
	    	}
		}
		return result.getN();
	}

	public String executeQuery(String jsonQuery) throws DScabiException, IOException {
		ArrayList<String> fieldList = fieldNames();
		DJson djson = new DJson(jsonQuery);
		Set<String> st = djson.keySet();
		BasicDBObject document = new BasicDBObject();
		ArrayList<String> finalList = new ArrayList<String>();
		HashMap<String, String> hmap = new HashMap<String, String>();
		DJson djson3 = null;
		
		if (false == isEmpty(fieldList)) {
			if (false == fieldList.containsAll(st)) {
		   		throw new DScabiException("One or more field name in jsonQuery doesn't exist in fieldNames list. jsonQuery : " + jsonQuery + " Field Names list : " + fieldList, "DDO.EQY.3");
			}
			
		}
	
		for (String key : st) {
		   	// create a document to store key and value
		   	document.put(key, djson.getString(key));
		}
	    DBCursor cursorExist = m_table.find(document);
	    	
	    while (cursorExist.hasNext()) {
	    		
	    	hmap.clear();
	    	DBObject ob = cursorExist.next();
	    	Set<String> obkeys = ob.keySet();
			obkeys.remove("_id"); // exclude _id field
	    	//log.debug("executeQuery() result from ob {}", ob.toString());
			if (false == isEmpty(fieldList)) {
				if (false == obkeys.containsAll(fieldList)) {
			   		throw new DScabiException("One or more field name in fieldList doesn't exist in obkeys key set. obkeys : " + obkeys + " Field Names list : " + fieldList, "DDO.EQY.4");
				}
				for (String field : obkeys) {
					//if (field.equals("_id"))
					//	continue;
					String f = (String) ((BasicBSONObject) ob).getString(field);
					if (null == f) {
			    		throw new DScabiException("Field name " + field + " doesn't exist in dbobject in dbcursor. jsonQuery : " + jsonQuery + " Field Names list : " + fieldList, "DDO.EQY.1");
					}
					//log.debug("executeQuery() field is {}", field);
					//log.debug("executeQuery() f is {}", f);
					hmap.put(field, f);
				}
			} else {
		   		for (String key : obkeys) {
					//if (key.equals("_id"))
					//	continue;
		   			String f2 = (String) ((BasicBSONObject) ob).getString(key);
					if (null == f2) {
			    		throw new DScabiException("Field name " + key + " doesn't exist in dbobject in dbcursor. jsonQuery : " + jsonQuery, "DDO.EQY.2");
					}
					//log.debug("executeQuery() key is {}", key);
					//log.debug("executeQuery() f2 is {}", f2);
					hmap.put(key, f2);
				}
			}
			DJson djson2 = null;
			//if (false == fieldList.isEmpty())
			//	djson2 = DJson.createDJsonList(hmap, fieldList);
			//else if (false == st.isEmpty())
			//	djson2 = DJson.createDJsonSet(hmap, st);
			if (false == obkeys.isEmpty())
				djson2 = DJson.createDJsonSet(hmap, obkeys);
			if (null == djson2) {
	    		throw new DScabiException("djson2 is null. jsonQuery : " + jsonQuery, "DDO.EQY.3");
			}
			finalList.add(djson2.toString());
	    }
	    djson3 = DJson.createDJsonWithCount(finalList);
		
		return djson3.toString();
	}

	public DBackCursor executeQueryCursorResult(String jsonQuery) throws IOException, DScabiException {
		ArrayList<String> fieldList = fieldNames();
		DJson djson = new DJson(jsonQuery);
		Set<String> st = djson.keySet();
		BasicDBObject document = new BasicDBObject();

		if (false == isEmpty(fieldList)) {
			if (false == fieldList.containsAll(st)) {
		   		throw new DScabiException("One or more field name in jsonQuery doesn't exist in fieldNames list. jsonQuery : " + jsonQuery + " Field Names list : " + fieldList, "DDO.EQC.1");
			}
		}

		for (String key : st) {
		    	// create a document to store key and value
		    	document.put(key, djson.getString(key));
		}
	    DBCursor cursorExist = m_table.find(document);
	   	return new DBackCursor(cursorExist);
	}

	public int executeUpdate(String jsonUpdate, String jsonWhere) throws IOException, DScabiException {
		ArrayList<String> fieldList = fieldNames();
		DJson djsonWhere = new DJson(jsonWhere);
		Set<String> stWhere = djsonWhere.keySet();
		BasicDBObject documentWhere = new BasicDBObject();
		
		DJson djsonUpdate = new DJson(jsonUpdate);
		Set<String> stUpdate = djsonUpdate.keySet();
		BasicDBObject documentUpdate = new BasicDBObject();

		if (false == isEmpty(fieldList)) {
			if (false == fieldList.containsAll(stWhere)) {
		   		throw new DScabiException("One or more field name in jsonWhere doesn't exist in fieldNames list. jsonWhere : " + jsonWhere + " Field Names list : " + fieldList, "DDO.EUE.1");
			}
			if (false == fieldList.containsAll(stUpdate)) {
	    		throw new DScabiException("One or more field name in jsonUpdate doesn't exist in fieldNames list. jsonUpdate : " + jsonUpdate + " Field Names list : " + fieldList, "DDO.EUE.2");				
	    	}
		}
		
		for (String keyWhere : stWhere) {
		    	// create a document to store key and value
		    	documentWhere.put(keyWhere, djsonWhere.getString(keyWhere));
		}

		for (String keyUpdate : stUpdate) {
	    	// create a document to store key and value
	    	documentUpdate.put(keyUpdate, djsonUpdate.getString(keyUpdate));
		}
	
	   	BasicDBObject updateObj = new BasicDBObject();
	   	updateObj.put("$set", documentUpdate);

	   	WriteResult result = m_table.updateMulti(documentWhere, updateObj);
		log.debug("result is : {}", result.getN());
	   	if (result.getN() <= 0)
			throw new DScabiException("Update failed for documentWhere : " + documentWhere.toString() + " updateObj : " + updateObj.toString(), "DBT.EUE.3");
  	
		return result.getN();
	
	}

	public int executeRemove(String jsonWhere) throws IOException, DScabiException {
		ArrayList<String> fieldList = fieldNames();
		DJson djsonWhere = new DJson(jsonWhere);
		Set<String> stWhere = djsonWhere.keySet();
		BasicDBObject documentWhere = new BasicDBObject();
		
		if (false == isEmpty(fieldList)) {
			if (false == fieldList.containsAll(stWhere)) {
		   		throw new DScabiException("One or more field name in jsonWhere doesn't exist in fieldNames list. jsonWhere : " + jsonWhere + " Field Names list : " + fieldList, "DDO.ERE.1");
			}
		}
		
		for (String keyWhere : stWhere) {
		    	// create a document to store key and value
		    	documentWhere.put(keyWhere, djsonWhere.getString(keyWhere));
		}

	   	// DBObject result = table.findAndRemove(documentWhere);
	   	WriteResult result = m_table.remove(documentWhere);
		log.debug("result is : {}", result.getN());
	   	if (result.getN() <= 0)
			throw new DScabiException("Remove failed for documentWhere : " + documentWhere.toString(), "DBT.ERE.3");

	   	return result.getN();
	
	}

	
}
