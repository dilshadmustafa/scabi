/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 26-Jan-2016
 * File Name : ComputeMetaHelper.java
 */
package com.dilmus.scabi.common;

import java.io.IOException;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.scabi.mns.MNSMain;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;

/**
 * @author Dilshad Mustafa
 *
 */
public class DComputeMetaHelper {

	private final Logger log = LoggerFactory.getLogger(DComputeMetaHelper.class);
	private DB db;
	private DBCollection table;

	public DComputeMetaHelper(DB db) {
		this.db = db;
		this.table = db.getCollection("ComputeMetaDataTable");
	}

	public DComputeMeta register(String fullHostName, String port) throws DScabiException {
    	int n = 0;
		// Insert
    	// create a document to store key and value
    	BasicDBObject document = new BasicDBObject();
    	document.put("ComputeHost", fullHostName);
    	document.put("ComputePort", port);
    	
    	DBCursor cursorExist = table.find(document);
    	n = cursorExist.count();
    	if (0 == n) {
    		System.out.println("Inside 0 == n");
	    	document.put("RegisteredDate", new Date());
	    	document.put("Status", "Available"); // Available, Inuse, Hold, Blocked
	    	table.insert(document);
    	}
    	else
    		throw new DScabiException("ComputeHost, ComputePort already exists", "CMH.RER.1"); // already found or multiple matches
    	return new DComputeMeta(db, fullHostName, port);
	}

	public DComputeMeta register(String jsonString) throws DScabiException, IOException {
		DJson djson = new DJson(jsonString);
		return register(djson.getString("ComputeHost"), djson.getString("ComputePort"));
	}
	
	public DComputeMeta alloc() throws DScabiException {
    	int n = 0;
		// Alloc
    	// create a document to store key and value
    	BasicDBObject document = new BasicDBObject();
    	document.put("Status", "Available");
    	
    	DBObject dbc = table.findOne(document);
    	if (null == dbc)
    		throw new DScabiException("No ComputeHost with status as Available", "CMH.ALC.1");
    	log.debug("ComputeHost Alloc : {}", dbc.get("ComputeHost"));
    	log.debug("ComputePort Alloc : {}", dbc.get("ComputePort"));
    	return new DComputeMeta(db, dbc.get("ComputeHost").toString(), dbc.get("ComputePort").toString());
	}
	
}
