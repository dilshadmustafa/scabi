package com.dilmus.scabi.mns;

import static spark.Spark.*;

// MongoDB
import java.net.UnknownHostException;
import java.util.Date;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.WriteConcern;

// GridFS
import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.Mongo;
import com.mongodb.MongoException;
import com.mongodb.gridfs.GridFS;
import com.mongodb.gridfs.GridFSDBFile;
import com.mongodb.gridfs.GridFSInputFile;


public class MNSMain {

    public static void main(String[] args) {
        // get("/hello", (req, res) -> "Hello World MNS4");
        System.out.println("from jar file Hello world MNS4");
        // MNSMain.testdb();
        MNSMain.testgridfs();
    }
	
	public static int testdb() {
		
	    try {

	    	// Connect to MongoDB
	    	// Since 2.10.0, uses MongoClient
	    	MongoClient mongo = new MongoClient("localhost", 27017);

	    	// client that makes it possible to connect a replica set 
	    	// MongoClient mongoClient = new MongoClient( Arrays.asList(new ServerAddress("localhost", 27017), new ServerAddress("localhost", 27018), new ServerAddress("localhost", 27019)));	    	

	    	// Get database
	    	// if database doesn't exists, MongoDB will create it for you
	    	DB db = mongo.getDB("MetaDB");

	    	// Authenticate
	    	// boolean auth = db.authenticate('username', 'password');	    	
	    	
	    	// Get collection / table from MetaDB
	    	// if collection doesn't exists, MongoDB will create it for you
	    	DBCollection table = db.getCollection("ComputeMetaDataTable");

	    	// Insert
	    	// create a document to store key and value
	    	BasicDBObject document = new BasicDBObject();
	    	document.put("ComputeHost", "localhost");
	    	document.put("ComputePort", "4568");
	    	document.put("RegisteredDate", new Date());
	    	document.put("Status", "Available"); // Available, Inuse, Hold, Blocked
	    	table.insert(document);

	    	// Find and display
	    	BasicDBObject searchQuery = new BasicDBObject();
	    	searchQuery.put("Status", "Available");

	    	DBCursor cursor = table.find(searchQuery);

	    	while (cursor.hasNext()) {
	    		System.out.println(cursor.next());
	    	}

	    	// Update
	    	// search document where Status="Available" and update it with new values
	    	BasicDBObject query = new BasicDBObject();
	    	query.put("Status", "Available");

	    	BasicDBObject newDocument = new BasicDBObject();
	    	newDocument.put("Status", "Inuse");

	    	BasicDBObject updateObj = new BasicDBObject();
	    	updateObj.put("$set", newDocument);

	    	table.update(query, updateObj);

	    	// Find and display
	    	BasicDBObject searchQuery2 
	    	    = new BasicDBObject().append("Status", "Inuse");

	    	DBCursor cursor2 = table.find(searchQuery2);

	    	while (cursor2.hasNext()) {
	    		System.out.println(cursor2.next());
	    	}

	    	System.out.println("Done");

	        } catch (MongoException e) {
	        	e.printStackTrace();
	        }
	    	return 0;
	}
	
	public static int testgridfs() {
		
		try {

			MongoClient mongo = new MongoClient("localhost", 27017);
			DB db = mongo.getDB("JFileDB");
			DBCollection collection = db.getCollection("JFileMetaDataTable");

			String newFileName = "com.dilmus.scabi.testdata.in.App.class";

			File jFile = new File("/home/anees/workspace/testdata/in/App.class");

			// create a JFileTable namespace
			GridFS gfsj = new GridFS(db, "JFileTable");

			// get file from local drive
			GridFSInputFile gfsFile = gfsj.createFile(jFile);

			// set a new filename for identify purpose
			gfsFile.setFilename(newFileName);

			// save the image file into mongoDB
			gfsFile.save();
			
			
			// Let's create a new JSON document with some "metadata" information
			BasicDBObject info = new BasicDBObject();
	    	info.put("DBHost", "localhost");
	    	info.put("DBPort", "27017");
	    	info.put("JFileName", newFileName);
	    	info.put("JFileID", gfsFile.getId());
	    	info.put("JFileMD5", gfsFile.getMD5());
	    	collection.insert(info, WriteConcern.SAFE);
	    	
			// print the result
			DBCursor cursor = gfsj.getFileList();
			while (cursor.hasNext()) {
				System.out.println(cursor.next());
			}

	    	DBCursor cursor2 = collection.find();

	    	while (cursor2.hasNext()) {
	    		System.out.println(cursor2.next());
	    	}

			
			// get file by it's filename
			GridFSDBFile jForOutput = gfsj.findOne(newFileName);

			// save it into a new image file
			jForOutput.writeTo("/home/anees/workspace/testdata/out/AppOut.class");

			// remove the file from mongoDB
			// gfsj.remove(gfsj.findOne(newFileName));

			System.out.println("Done");

		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (MongoException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}		
		
		return 0;
	}
	
	
}
