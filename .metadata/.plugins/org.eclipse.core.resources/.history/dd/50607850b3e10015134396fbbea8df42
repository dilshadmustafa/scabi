/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 29-Feb-2016
 * File Name : DComputeAsyncConfig.java
 */
package com.dilmus.dilshad.scabi.client.async;

import java.util.HashMap;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.client.DComputeUnit;
import com.dilmus.dilshad.scabi.common.DScabiException;

/**
 * @author Dilshad Mustafa
 *
 */
public class DComputeAsyncConfig {
	public final static int CODE = 1;
	public final static int CLASS = 2;
	public final static int OBJECT = 3;

	private final Logger log = LoggerFactory.getLogger(DComputeAsyncConfig.class);
	private DComputeUnit m_unit = null;
	private Class<? extends DComputeUnit> m_class = null;
	private String m_code = null;
	private int m_configType = 0;
	private String m_jsonInput = null;
	private HashMap<String, String> m_outputMap = null;
	private int m_maxSplit = 1;
	private int m_maxRetry = 0;
	
	boolean m_isSplitSet = false;
	int m_startSplit = -1;
	int m_endSplit = -1;
	
	public DComputeAsyncConfig(DComputeUnit unit) {
		m_unit = unit;
		m_configType = DComputeAsyncConfig.OBJECT;
		m_maxSplit = 1;
		
	}
	
	public DComputeAsyncConfig(Class<? extends DComputeUnit> cls) {
		m_class = cls;
		m_configType = DComputeAsyncConfig.CLASS;
		m_maxSplit = 1;
		
	}

	public DComputeAsyncConfig(String code) {
		m_code = code;
		m_configType = DComputeAsyncConfig.CODE;
		m_maxSplit = 1;
		
	}

	
	int setSplitRange(int startSplit, int endSplit) throws DScabiException {
		
		if (startSplit <= 0) {
			throw new DScabiException("startSplit should not be <= 0", "CAC.SSR.1");
		}
		if (endSplit <= 0) {
			throw new DScabiException("endSplit should not be <= 0", "CAC.SSR.2");
		}
		if (startSplit > endSplit) {
			throw new DScabiException("startSplit should not be > endSplit", "CAC.SSR.3");
		}
		m_isSplitSet = true;
		m_startSplit = startSplit;
		m_endSplit = endSplit;

		return 0;
	}
	public int getConfigType() {
		return m_configType;
	}
	
	public DComputeUnit getComputeUnit() {
		return m_unit;
	}

	public Class<? extends DComputeUnit> getComputeClass() {
		return m_class;
	}
	
	public String getComputeCode() {
		return m_code;
	}

	public int setInput(String jsonInput) {
		m_jsonInput = jsonInput;
		return 0;
	}
	
	public int setOutput(HashMap<String, String> outputMap) {
		m_outputMap = outputMap;
		return 0;
	}
	
	public int setResult(int splitno, String result) {
		if (m_outputMap != null) {
			m_outputMap.put("" + splitno, result);
			log.debug("setResult() Setting result for splitno : {}, {}", splitno, result);
		}
		
		/* Debugging
    	Set<String> st = m_outputMap.keySet();
    	for (String s : st) {
    		log.debug("setResult() for {} : {}", s, m_outputMap.get(s));
    	}
		*/
		return 0;
	}

	public int appendResult(int splitno, String result) {
		if (m_outputMap != null) {
			if (m_outputMap.containsKey("" + splitno)) {
				String str = m_outputMap.get("" + splitno);
				str = str + " Appended Result : " + result;
				m_outputMap.put("" + splitno, str);
			} else {
				m_outputMap.put("" + splitno, result);
			}
			log.debug("appendResult() Setting result for splitno : {}, {}", splitno, result);
		}
		
		/* Debugging
    	Set<String> st = m_outputMap.keySet();
    	for (String s : st) {
    		log.debug("appendResult() for {} : {}", s, m_outputMap.get(s));
    	}
		*/
		return 0;
	}

	
	public boolean isResultSet(int splitno) {
		if (m_outputMap != null) {
			if (m_outputMap.containsKey("" + splitno))
				return true;
		}
		return false;
	}
	
	public int setMaxSplit(int maxSplit) {
		m_maxSplit = maxSplit;
		return 0;
	}
	
	public int setMaxRetry(int maxRetry) {
		m_maxRetry = maxRetry;
		return 0;
	}
	
	public String getInput() {
		return m_jsonInput;
	}
	
	public HashMap<String, String> getOutput() {
		return m_outputMap;
	}
	
	public int getMaxSplit() {
		return m_maxSplit;
	}
	
	public int getMaxRetry() {
		return m_maxRetry;
	}

}
