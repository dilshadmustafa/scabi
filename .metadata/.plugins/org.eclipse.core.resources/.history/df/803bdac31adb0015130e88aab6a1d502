/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 07-Feb-2016
 * File Name : ComputePool.java
 */
package com.dilmus.dilshad.scabi.client;

import java.io.IOException;
import java.util.HashMap;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.http.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Dilshad Mustafa
 *
 */
public class Compute {

	private final Logger log = LoggerFactory.getLogger(Compute.class);
	private ExecutorService m_threadPool = null;
	private Meta m_meta = null;
	private int m_commandID = 1;
	private HashMap<String, ComputeConfig> m_commandMap = null;
	private String m_jsonInput = null;
	private StringBuffer m_outputStrBuffer = null;
	private int m_maxSplit = 1;
	private int m_maxRetry = 0;

	ComputeConfig m_config = null;
	
	public Compute(Meta meta) {
		
		// e.g. cp.executeBshSource(String bsh, StringBuffer sbuff)
		//        .executeBshSource(String bsh, String jsonInput, StringBuffer sbuff)
		//        .executeJarFile(String namespace, String jarFileName, StringBuffer sbuff)
		//        .executeJarFile(String namespace, String jarFileName, String classFileName, StringBuffer sbuff)
		//        .executeClassFile(String namespace, String classFileName, StringBuffer sbuff)
	
		// all are execute concurrently using SwingWorker
		
		m_meta = meta;
		m_threadPool = Executors.newFixedThreadPool(120);
		m_commandMap = new HashMap<String, ComputeConfig>();
	}
	
	public Compute executeObject(ComputeUnit unit) throws ParseException, IOException, ScabiClientException {

		if (m_config != null) {
			m_config.setInput(m_jsonInput);
			m_config.setOutput(m_outputStrBuffer);
			m_config.setMaxSplit(m_maxSplit);
			m_config.setMaxRetry(m_maxRetry);
			m_commandMap.put("" + m_commandID, m_config);
			m_commandID++;
			m_config = null;
		}
		m_config = new ComputeConfig(unit);
		return this;
	}

	public Compute setInput(String jsonInput) {
		m_jsonInput = jsonInput;
		return this;
	}
	
	public Compute setOutput(StringBuffer outputStrBuffer) {
		m_outputStrBuffer = outputStrBuffer;
		return this;
	}

	public Compute maxSplit(int maxSplit) {
		m_maxSplit = maxSplit;
		return this;
	}
	
	public Compute maxRetry(int maxRetry) {
		m_maxRetry = maxRetry;
		return this;
	}

	public Compute testexecuteObject(ComputeUnit unit) throws ParseException, IOException, ScabiClientException {

        ComputeSync csync = m_meta.computeAlloc();
        log.debug("ComputeSync is {}", csync);

		
		ComputeConfig config = new ComputeConfig(unit);
		ComputeRun cr = new ComputeRun(); 
		cr.setConfig(config);
		cr.setComputeSync(csync);
		m_threadPool.execute(cr);
		return this;
	}

	public Compute build() throws ParseException, IOException, ScabiClientException {
		if (m_config != null) {
			m_config.setInput(m_jsonInput);
			m_config.setOutput(m_outputStrBuffer);
			m_config.setMaxSplit(m_maxSplit);
			m_config.setMaxRetry(m_maxRetry);
			m_commandMap.put("" + m_commandID, m_config);
			m_commandID++;
			m_config = null;
		}

		if (1 == m_commandID) {
			log.debug("No commands are added");
			return this;
		}
		//ComputeSync csync = m_meta.getCompute();
		//ComputeSync csynca[] = m_meta.getComputeMany(m_commandID);
		ComputeSync csynca[] = m_meta.getComputeMany(2);
		
        for (ComputeSync csync : csynca) {
        	log.debug("Compute is {}", csync);
        }
        
        Set<String> st = m_commandMap.keySet();
        int k = 0;
        for (String key : st) {
	        //if (k >= csynca.length)
	        //	k = 0;
        	ComputeConfig config = m_commandMap.get(key);
			int maxSplit = config.getMaxSplit();
			log.debug("maxSplit : {}", maxSplit);
        	for (int i = 0; i < maxSplit; i++) {
        		log.debug("Inside split for loop");
        		if (k >= csynca.length)
    	        	k = 0;
            	ComputeRun cr = new ComputeRun(); 
            	cr.setConfig(config);
            	csynca[k].setTU(maxSplit);
            	csynca[k].setSU(i + 1);
            	cr.setComputeSync(csynca[k]);
    			k++;
    			m_threadPool.execute(cr);
        	}
        }
        
		return this;
	}
	
	
	public void test() {
		ComputeRun cr = new ComputeRun(); 
		m_threadPool.execute(cr);
	}

	
}
