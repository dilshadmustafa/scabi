/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 09-Mar-2016
 * File Name : Dao.java
 */
package com.dilmus.dilshad.scabi.client;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.common.DDB;
import com.dilmus.dilshad.scabi.common.DMUtil;
import com.dilmus.dilshad.scabi.common.DScabiException;
import com.dilmus.dilshad.scabi.common.DTable;
import com.dilmus.dilshad.scabi.deprecated.DBackFileOld;
import com.dilmus.dilshad.scabi.deprecated.DDBOld;
import com.dilmus.dilshad.scabi.deprecated.DTableOld;
import com.dilmus.dilshad.scabi.deprecated.Dao2;

/**
 * @author Dilshad Mustafa
 *
 */
public class Dao {



	final static Logger log = LoggerFactory.getLogger(Dao.class);
	//private String m_tableName = null;
	private DDB m_ddb = null;
	//private DTable m_table = null;
	private DNamespace m_namespace = null;
	private String m_strNamespace = null;
	private DMeta m_meta = null;
	private HashMap<String, DDB> m_mapNamespaceStrDDB = null;
	
	public Dao(DMeta meta) throws IOException, ParseException, DScabiClientException, DScabiException {
		m_meta = meta;
		
		m_mapNamespaceStrDDB = new HashMap<String, DDB>();
		//m_tableName = null;
		m_ddb = null;
		//m_table = null;
		m_namespace = null;
		m_strNamespace = null;
	}
	
	public int close() {
		if (m_ddb != null)
			m_ddb.close();
		m_ddb = null;
		//TODO close all in hash map also
		return 0;
		
	}

	
	public int setNamespace(String strNamespace) throws DScabiException, IOException, DScabiClientException {
		
		m_namespace = null;
		m_strNamespace = null;
		
		if (null != m_ddb)
			m_ddb.close();
		if (null == strNamespace) {
			throw new DScabiClientException("strNamespace is null", "DFE.PUT.1");
		}
		DNamespace namespace = m_meta.getNamespace(strNamespace, DNamespace.APPTABLE);
		m_ddb = new DDB(namespace.getHost(), namespace.getPort(), namespace.getSystemSpecificName());

		m_namespace = namespace;
		m_strNamespace = namespace.getName();
		m_mapNamespaceStrDDB.put(m_strNamespace, m_ddb);
		
		return 0;
		
	}
	
	public int setNamespace(DNamespace namespace) throws DScabiException, IOException, DScabiClientException {
		
		m_namespace = null;
		m_strNamespace = null;
		
		if (null != m_ddb)
			m_ddb.close();
		if (null == namespace) {
			throw new DScabiClientException("namespace is null", "DFE.SNE2.1");
		}
		if (false == namespace.getType().equals(DNamespace.APPTABLE)) {
			throw new DScabiClientException("Namespace type is not AppTable type. Actual type : " + namespace.getType(), "DFE.SNE2.2");
		}
		m_ddb = new DDB(namespace.getHost(), namespace.getPort(), namespace.getSystemSpecificName());

		m_namespace = namespace;
		m_strNamespace = namespace.getName();
		m_mapNamespaceStrDDB.put(m_strNamespace, m_ddb);

		return 0;
		
	}


	public DTable getTable(String tableName) throws DScabiException, org.apache.http.ParseException, IOException, DScabiClientException {
		if (null == tableName) {
			throw new DScabiClientException("tableName is null", "DFE.SNE2.1");
		}
		if (DMUtil.isNamespaceURLStr(tableName)) {
			String strNamespace = DMUtil.getNamespaceStr(tableName);
			log.debug("strNamespace : {}", strNamespace);
			String resourceName = DMUtil.getResourceName(tableName);
			log.debug("resourceName : {}", resourceName);
			DDB ddb = null;
			
			if (m_mapNamespaceStrDDB.containsKey(strNamespace)) {
				ddb = m_mapNamespaceStrDDB.get(strNamespace);
				return ddb.getTable(resourceName);
				
			} else {
				DNamespace namespace = m_meta.getNamespace(strNamespace, DNamespace.APPTABLE);
				log.debug("namespace : {}", namespace.toString());
				ddb = new DDB(namespace.getHost(), namespace.getPort(), namespace.getSystemSpecificName());
				m_mapNamespaceStrDDB.put(strNamespace, ddb);
				return ddb.getTable(resourceName);
			}
		
		} else {
			if (null == m_namespace) {
				throw new DScabiClientException("Namespace is not set", "DFE.PUT2.1");
			}
			return m_ddb.getTable(tableName);
		
		}
	
	}

	public DTable tableExists(String tableName) throws DScabiException, org.apache.http.ParseException, IOException, DScabiClientException {
		if (null == tableName) {
			throw new DScabiClientException("tableName is null", "DFE.SNE2.1");
		}
		if (DMUtil.isNamespaceURLStr(tableName)) {
			String strNamespace = DMUtil.getNamespaceStr(tableName);
			log.debug("strNamespace : {}", strNamespace);
			String resourceName = DMUtil.getResourceName(tableName);
			log.debug("resourceName : {}", resourceName);
			DDB ddb = null;
			
			if (m_mapNamespaceStrDDB.containsKey(strNamespace)) {
				ddb = m_mapNamespaceStrDDB.get(strNamespace);
				return ddb.getTable(resourceName);
				
			} else {
				DNamespace namespace = m_meta.getNamespace(strNamespace, DNamespace.APPTABLE);
				log.debug("namespace : {}", namespace.toString());
				ddb = new DDB(namespace.getHost(), namespace.getPort(), namespace.getSystemSpecificName());
				m_mapNamespaceStrDDB.put(strNamespace, ddb);
				return ddb.getTable(resourceName);
			}
		
		} else {
			if (null == m_namespace) {
				throw new DScabiClientException("Namespace is not set", "DFE.PUT2.1");
			}
			return m_ddb.getTable(tableName);
		
		}
	
	}

	public DTable createTable(String tableName) throws DScabiException, org.apache.http.ParseException, IOException, DScabiClientException {
		if (null == tableName) {
			throw new DScabiClientException("tableName is null", "DFE.SNE2.1");
		}
		if (DMUtil.isNamespaceURLStr(tableName)) {
			String strNamespace = DMUtil.getNamespaceStr(tableName);
			log.debug("strNamespace : {}", strNamespace);
			String resourceName = DMUtil.getResourceName(tableName);
			log.debug("resourceName : {}", resourceName);
			DDB ddb = null;
			
			if (m_mapNamespaceStrDDB.containsKey(strNamespace)) {
				ddb = m_mapNamespaceStrDDB.get(strNamespace);
				return ddb.createTable(resourceName);
				
			} else {
				DNamespace namespace = m_meta.getNamespace(strNamespace, DNamespace.APPTABLE);
				log.debug("namespace : {}", namespace.toString());
				ddb = new DDB(namespace.getHost(), namespace.getPort(), namespace.getSystemSpecificName());
				m_mapNamespaceStrDDB.put(strNamespace, ddb);
				return ddb.createTable(resourceName);
			}
		
		} else {
			if (null == m_namespace) {
				throw new DScabiClientException("Namespace is not set", "DFE.PUT2.1");
			}
			return m_ddb.createTable(tableName);
		
		}
	
	}
}
