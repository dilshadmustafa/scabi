/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 27-Jan-2016
 * File Name : DJson.java
 */
package com.dilmus.dilshad.scabi.common;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonNumber;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonReader;
import javax.json.JsonValue;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * @author Dilshad Mustafa
 *
 */
public class DMJson {

	private static final Logger log = LoggerFactory.getLogger(DMJson.class);
	private String m_jsonString;
	private JsonObject m_jsonObject;
	
	public DMJson(String jsonString) throws IOException {
		m_jsonString = jsonString;
		InputStream fis = new ByteArrayInputStream(Charset.forName("UTF-16").encode(jsonString).array());
		//create JsonReader object
		JsonReader jsonReader = Json.createReader(fis);
		
		/* To create JsonReader from factory
		JsonReaderFactory factory = Json.createReaderFactory(null);
		jsonReader = factory.createReader(fis);
		*/
		
		// get JsonObject from JsonReader
		m_jsonObject = jsonReader.readObject();
		
		jsonReader.close();
		fis.close();

	}
	
	public DMJson(JsonObject jsonObject) {
		
		m_jsonObject = jsonObject;
		m_jsonString = jsonObject.toString();
	}

	public DMJson(String key, String value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

    	job.add(key, value);
	    JsonObject j = job.build();
		
	    m_jsonObject = j;
	    m_jsonString = j.toString();
		
	}
	
	public DMJson(String key, int value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

    	job.add(key, value);
	    JsonObject j = job.build();
		
	    m_jsonObject = j;
	    m_jsonString = j.toString();
		
	}
	
	public DMJson(String key, long value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

    	job.add(key, value);
	    JsonObject j = job.build();
		
	    m_jsonObject = j;
	    m_jsonString = j.toString();
		
	}

	public DMJson(String key, float value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

    	job.add(key, value);
	    JsonObject j = job.build();
		
	    m_jsonObject = j;
	    m_jsonString = j.toString();
		
	}

	public DMJson(String key, double value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

    	job.add(key, value);
	    JsonObject j = job.build();
		
	    m_jsonObject = j;
	    m_jsonString = j.toString();
		
	}

	public String getString(String field) {
		return m_jsonObject.getString(field);
	}
	
	public int getInt(String field) {
		return m_jsonObject.getInt(field);
	}
	
	public JsonNumber getNumber(String field) {
		return m_jsonObject.getJsonNumber(field);
	}

	public boolean getBoolean(String field) {
		return m_jsonObject.getBoolean(field);
	}
	
	public JsonArray getJsonArray(String field) {
		return m_jsonObject.getJsonArray(field);
	}
	public JsonObject getJsonObject(String field) {
		return m_jsonObject.getJsonObject(field);
	}
	
	public Set<String> keySet() {
		return m_jsonObject.keySet();
	}
	
	public String toString() {
		//log.debug("toString() jsonString : {}", jsonString);
		return m_jsonString;
	}
	
	public DMJson add(String key, String value) {
		    JsonObjectBuilder job = Json.createObjectBuilder();

		    for (Entry<String, JsonValue> entry : m_jsonObject.entrySet()) {
		        job.add(entry.getKey(), entry.getValue());
		    }
		    JsonObject j = job.add(key, value).build();
		
		return new DMJson(j);
	}
	
	public DMJson add(String key, int value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    for (Entry<String, JsonValue> entry : m_jsonObject.entrySet()) {
	        job.add(entry.getKey(), entry.getValue());
	    }
	    JsonObject j = job.add(key, value).build();
	
	    return new DMJson(j);
	}
	
	public DMJson add(String key, long value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    for (Entry<String, JsonValue> entry : m_jsonObject.entrySet()) {
	        job.add(entry.getKey(), entry.getValue());
	    }
	    JsonObject j = job.add(key, value).build();
	
	    return new DMJson(j);
	}
	
	public DMJson add(String key, float value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    for (Entry<String, JsonValue> entry : m_jsonObject.entrySet()) {
	        job.add(entry.getKey(), entry.getValue());
	    }
	    JsonObject j = job.add(key, value).build();
	
	    return new DMJson(j);
	}

	public DMJson add(String key, double value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    for (Entry<String, JsonValue> entry : m_jsonObject.entrySet()) {
	        job.add(entry.getKey(), entry.getValue());
	    }
	    JsonObject j = job.add(key, value).build();
	
	    return new DMJson(j);
	}

	public DMJson add(String key, boolean value) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    for (Entry<String, JsonValue> entry : m_jsonObject.entrySet()) {
	        job.add(entry.getKey(), entry.getValue());
	    }
	    JsonObject j = job.add(key, value).build();
	
	    return new DMJson(j);
	}

	public static DMJson createDJsonList(HashMap<String, String> hmap, ArrayList<String> fieldNames) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    if (true == hmap.isEmpty()) {
	    	return null;
	    }
	    if (true == fieldNames.isEmpty()) {
	    	return null;
	    }
	    for (String field : fieldNames) {
	    	//System.out.println("createDJsonList(HashMap hmap, ArrayList<String> fieldNames) from hmap {}" + hmap.get(field) + " field " + field);
	    	//log.debug("createDJsonList(HashMap hmap, ArrayList<String> fieldNames) from hmap {} field {}", hmap.get(field), field);

	    	job.add(field, (String) hmap.get(field));
	    }
	    JsonObject j = job.build();
		
		return new DMJson(j);
		
	}
	
	public static DMJson createDJsonSet(HashMap<String, String> hmap, Set<String> st) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    if (true == hmap.isEmpty()) {
	    	return null;
	    }
	    if (true == st.isEmpty()) {
	    	return null;
	    }
	    for (String field : st) {
	    	//System.out.println("createDJsonSet(HashMap hmap, ArrayList<String> fieldNames) from hmap {}" + hmap.get(field) + " field " + field);
	    	//log.debug("createDJsonSet(HashMap hmap, ArrayList<String> fieldNames) from hmap {} field {}", hmap.get(field), field);

	    	job.add(field, (String) hmap.get(field));
	    }
	    JsonObject j = job.build();
		
		return new DMJson(j);
		
	}
		
	public static DMJson createDJson(ArrayList<String> arrayofDJsons) {
	    JsonObjectBuilder job = Json.createObjectBuilder();
	    int n = 1;
	    for (String s : arrayofDJsons) {
	    	//log.debug("createDJson(ArrayList<String>) jsonString : {}", s);
	        //System.out.println("createDJson(ArrayList<String>) jsonString : " + s);
	    	job.add("" + n, s);
	    	n++;
	    }
	    JsonObject j = job.build();
		
		return new DMJson(j);
		
	}
	
	public static DMJson createDJsonWithCount(ArrayList<String> arrayofDJsons) {
	    JsonObjectBuilder job = Json.createObjectBuilder();

	    String count = "" + arrayofDJsons.size();
	    job.add("Count", ""+count);
	    int n = 1;
	    for (String s : arrayofDJsons) {
	    	//log.debug("createDJsonWithCount(ArrayList<String>) jsonString : {}", s);
	        //System.out.println("createDJsonWithCount(ArrayList<String>) jsonString : " + s);
	    	job.add("" + n, s);
	    	n++;
	    }
	    JsonObject j = job.build();
		
		return new DMJson(j);
		
	}
	
	public static String ok() {
		return "{ \"Ok\" : \"1\" }";
	}

	public static String empty() {
		return "{ \"Empty\" : \"1\" }";
	}
	
	public static String error(String errorMessage) {
		//return "{ \"Error\" : \"" + errorMessage + "\" }";
		return (new DMJson("Error", errorMessage)).toString();
	}

	public static String result(String result) {
		//return "{ \"Result\" : \"" + result + "\" }";
		return (new DMJson("Result", result)).toString();
	}

	public boolean isOk() throws IOException {
		
		Set<String> st = m_jsonObject.keySet();
		
		if (1 == st.size() && st.contains("Ok"))
			return true;
		else
			return false;
	}

	public boolean isError() throws IOException {
		
		Set<String> st = m_jsonObject.keySet();
		
		if (1 == st.size() && st.contains("Error"))
			return true;
		else
			return false;
	}
	
	public int getTU() {
		return getIntOf("TotalComputeUnit");
	}

	public int getCU() {
		return getIntOf("SplitComputeUnit");
	}
	
	public int getIntOf(String field) {
		return Integer.parseInt(getString(field));
	}

	public long getLongOf(String field) {
		return Long.parseLong(getString(field));
	}

	public float getFloatOf(String field) {
		return Float.parseFloat(getString(field));
	}

	public double getDoubleOf(String field) {
		return Double.parseDouble(getString(field));
	}

	public boolean getBooleanOf(String field) {
		return Boolean.parseBoolean(getString(field));
	}

	public DMJson getInput() throws IOException {
		return new DMJson(getString("JsonInput"));
	}

	public DMJson getResult() throws IOException {
		return new DMJson(getString("Result"));
	}

	public int getCount() throws IOException {
		return Integer.parseInt(getString("Count"));
	}

	public boolean contains(String key) {
		return m_jsonObject.keySet().contains(key);
	}
	
	public static DMJson dummyDson() throws IOException {
		DMJson dson1 = new DMJson("TotalComputeUnit", "1");
		DMJson dson2 = dson1.add("SplitComputeUnit", "1");
		DMJson dson3 = dson2.add("JsonInput", DMJson.empty());

		return dson3;
	}

	public static String dummy() throws IOException {
		DMJson dson1 = new DMJson("TotalComputeUnit", "1");
		DMJson dson2 = dson1.add("SplitComputeUnit", "1");
		DMJson dson3 = dson2.add("JsonInput", DMJson.empty());

		return dson3.toString();
	}

}

