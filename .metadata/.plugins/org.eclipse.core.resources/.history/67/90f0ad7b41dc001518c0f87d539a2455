/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 24-Feb-2016
 * File Name : ComputeConfig.java
 */
package com.dilmus.dilshad.scabi.client;

import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Dilshad Mustafa
 *
 */
public class ComputeConfig {
	public final static int CODE = 1;
	public final static int CLASS = 2;
	public final static int OBJECT = 3;

	private final Logger log = LoggerFactory.getLogger(ComputeConfig.class);
	private ComputeUnit m_unit = null;
	private Class<? extends ComputeUnit> m_class = null;
	private String m_code = null;
	private int m_configType = 0;
	private String m_jsonInput = null;
	private HashMap<String, String> m_outputMap = null;
	private HashMap<String, Boolean> m_splitStatusMap = null;
	private int m_maxSplit = 1;
	private int m_maxRetry = 0;
	private HashMap<String, Integer> m_failedSplitRetryMap = null;
	
	public ComputeConfig(ComputeUnit unit) {
		m_unit = unit;
		m_configType = ComputeConfig.OBJECT;
		m_maxSplit = 1;
		m_splitStatusMap =  new HashMap<String, Boolean>();
		m_failedSplitRetryMap = new 
		
	}
	
	public int setSplitStatus(int splitno, boolean status) {
		m_splitStatusMap.put("" + splitno, status);
		return 0;
	}
	
	public boolean getSplitStatus(int splitno) {
		return m_splitStatusMap.get("" + splitno);
	}
	
	public int getConfigType() {
		return m_configType;
	}
	
	public ComputeUnit getComputeUnit() {
		return m_unit;
	}

	public int setInput(String jsonInput) {
		m_jsonInput = jsonInput;
		return 0;
	}
	
	public int setOutput(HashMap<String, String> outputMap) {
		m_outputMap = outputMap;
		return 0;
	}
	
	public int setMaxSplit(int maxSplit) {
		m_maxSplit = maxSplit;
		return 0;
	}
	
	public int setMaxRetry(int maxRetry) {
		m_maxRetry = maxRetry;
		return 0;
	}
	
	public String getInput() {
		return m_jsonInput;
	}
	
	public HashMap<String, String> getOutput() {
		return m_outputMap;
	}
	
	public int getMaxSplit() {
		return m_maxSplit;
	}
	
	public int getMaxRetry() {
		return m_maxRetry;
	}

}
