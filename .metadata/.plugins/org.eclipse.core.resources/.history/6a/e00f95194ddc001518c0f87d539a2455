/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 24-Feb-2016
 * File Name : ComputeThread.java
 */
package com.dilmus.dilshad.scabi.client;


import java.io.IOException;

import org.apache.http.ParseException;
import org.apache.http.ProtocolException;
import org.apache.http.client.ClientProtocolException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.common.DScabiException;

/**
 * @author Dilshad Mustafa
 *
 */
public class ComputeRun implements Runnable {

	private final Logger log = LoggerFactory.getLogger(ComputeRun.class);
	private ComputeConfig m_config = null;
	private ComputeSync m_computeSync = null;
	private boolean m_isDone = false;
	
	public ComputeRun() {
		m_config = null;
		m_computeSync = null;

		m_isDone = false;
	}
	
	public int setComputeSync(ComputeSync computeSync) {
		m_computeSync = computeSync;
		return 0;
	}

	public int setConfig(ComputeConfig config) {
		m_config = config;
		return 0;
	}
	/*
	public void run() {
		try {
			Thread.sleep(10000);	
		} catch (Exception e) { 
			
		}
		if (null == m_config) {
			//throw new DScabiException("config is not set", "CRN.RUN.1");
			log.debug("config is not set");
		}
		if (null == m_computeSync) {
			//throw new DScabiException("computeSync is not set", "CRN.RUN.1");
			log.debug("computeSync is not set");
		}
		synchronized (m_computeSync) {
		
			try {
				if (ComputeConfig.OBJECT == m_config.getConfigType()) {
					log.debug("Executing Object");
					m_computeSync.executeObject(m_config.getComputeUnit());
				}
			} catch (Exception e) {
				log.debug("Exception : {}", e.toString());
			}
		
		}
		
	}
	*/
	
	
	public void doRun() {
		m_isDone = false;
		if (null == m_config) {
			//throw new DScabiException("config is not set", "CRN.RUN.1");
			log.debug("config is not set");
			m_isDone = true;
			return;
		}
		if (null == m_computeSync) {
			//throw new DScabiException("computeSync is not set", "CRN.RUN.1");
			log.debug("computeSync is not set");
			m_isDone = true;
			return;
		}
				
			try {
				if (ComputeConfig.OBJECT == m_config.getConfigType()) {
					log.debug("Executing Object");
					m_computeSync.executeObject(m_config.getComputeUnit());
				}
			} catch (IOException e) {
				log.debug("Exception : {}", e.toString());
				m_computeSync.setFaulty(true);
				
				int su = m_computeSync.getSU();
				log.debug("m_computeSync.getSU() : {}", su);
				
				synchronized (m_config) {
					m_config.setOrIncFailedSplitRetryMap(su);
					m_config.setSplitStatus(su, false);
				}
				
			}
	
	}

	public void run() {
		synchronized (m_computeSync) {
			
			try {
		        doRun();
		    } catch (Throwable e) {
				log.debug("Throwable : {}", e.toString());
				m_computeSync.setFaulty(true);
				
				int splitno = m_computeSync.getSU();
				log.debug("m_computeSync.getSU() : {}", su);
				
				synchronized (m_config) {
					m_config.setOrIncFailedSplitRetryMap(su);
					m_config.setSplitStatus(su, false);
					setResult(splitno, e.toString());
				}

		        
		        
		    }
		
		}
		
		
		
		catch (Error | RuntimeException e) {
	        throw e;
	    } catch (Exception e) {
	        throw e;
	    } catch (Throwable e) {
	        throw new RuntimeException(e);
	    }
	
	
	
	
	}
	
}
