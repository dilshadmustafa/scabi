/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 26-Jan-2016
 * File Name : ComputeMeta.java
 */
package com.dilmus.dilshad.scabi.ms;

import java.io.IOException;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.client.DScabiClientException;
import com.dilmus.dilshad.scabi.common.DMJson;
import com.dilmus.dilshad.scabi.common.DMJsonHelper;
import com.dilmus.dilshad.scabi.common.DResultSet;
import com.dilmus.dilshad.scabi.common.DScabiException;
import com.dilmus.dilshad.scabi.common.DTable;
import com.dilmus.dilshad.scabi.db.DDB;
import com.dilmus.dilshad.scabi.db.DDocument;
import com.dilmus.dilshad.scabi.deprecated.DDBOld;
import com.dilmus.dilshad.scabi.deprecated.DObject;
import com.dilmus.dilshad.scabi.deprecated.DResultSetOld;
import com.dilmus.dilshad.scabi.deprecated.DTableOld;

/**
 * @author Dilshad Mustafa
 *
 */
public class DMComputeServer {

	final static Logger log = LoggerFactory.getLogger(DMComputeServer.class);
	private DDB m_ddb = null;
	private DTable m_table = null;
	private String m_fullHostName = null;
	private String m_port = null;
	private DDocument m_document = null;
	
	private CloseableHttpClient m_httpClient = null;
	private HttpHost m_target = null;
	
	
	public DMComputeServer(DDB ddb, String fullHostName, String port) throws DScabiException {
		m_ddb = ddb;
		m_table = ddb.getTable("ComputeMetaDataTable");
		m_fullHostName = fullHostName;
		m_port = port;
    	
		// create a document to store key and value
		m_document = new DDocument();
		m_document.put("ComputeHost", fullHostName);
		m_document.put("ComputePort", port);
	}
	
	public DMComputeServer(DDB ddb, String jsonString) throws IOException, DScabiException {
		m_ddb = ddb;
		m_table = ddb.getTable("ComputeMetaDataTable");
		DMJson djson = new DMJson(jsonString);
		m_fullHostName = djson.getString("ComputeHost");
		m_port = djson.getString("ComputePort");
    	
		// create a document to store key and value
		m_document = new DDocument();
		m_document.put("ComputeHost", m_fullHostName);
		m_document.put("ComputePort", m_port);
	}
	
	public int updateStatus(String status) throws DScabiException {
		long n = 0;
    	
    	//DResultSet cursorExist = m_table.find(m_document);
    	n = m_table.count(m_document);
    	if (1 == n) {
			log.debug("updateStatus() Inside 1 == n");
   			// Update
    	    DDocument newDocument = new DDocument();
    	   	newDocument.put("Status", status); // Available, Inuse, Hold, Blocked

    	   	DDocument updateObj = new DDocument();
    	   	updateObj.put("$set", newDocument);

    	   	m_table.update(m_document, updateObj);
    	}  else if (0 == n) {
    		log.debug("updateStatus() No matches found for ComputeHost {}, ComputePort {}", m_fullHostName, m_port);
			throw new DScabiException("No matches found for ComputeHost, ComputePort", "DCM.USS.1");
    	} else {
			log.debug("updateStatus() Multiple matches found for ComputeHost {}, ComputePort {}", m_fullHostName, m_port);
			throw new DScabiException("Multiple matches found for ComputeHost, ComputePort", "DCM.USS.2");
    	}
    	return 0;
	}
	
	public int remove() throws DScabiException {
		m_table.remove(m_document);
		return 0;
	}
	
	@Override
	public String toString() {
		return DMJsonHelper.computeHostPort(m_fullHostName, m_port);
	}
	
	public boolean checkIfRunning() throws IOException, DScabiClientException {
		
		boolean status = false;
		
		try {
			m_httpClient = HttpClientBuilder.create().build();
			m_target = new HttpHost(m_fullHostName, Integer.parseInt(m_port), "http");
    		status = true;
    	} catch (Exception e) {
			e.printStackTrace();
			status = false;
    		if (null != m_httpClient) { 
    			m_httpClient.close();
    			m_httpClient = null;
    		}
    		throw e;
		}
	
		HttpPost postRequest = new HttpPost("/Compute/isRunning");
		String myString = "";
	    StringEntity params =new StringEntity(myString);
	    
	    postRequest.addHeader("content-type", "application/json");
	    postRequest.setEntity(params);
	            			
		log.debug("checkIfRunning() executing request to " + m_target + "/Compute/isRunning");

		// works HttpResponse httpResponse = httpClient.execute(target, getRequest);
		HttpResponse httpResponse = m_httpClient.execute(m_target, postRequest);
		HttpEntity entity = httpResponse.getEntity();
	
		log.debug("checkIfRunning()----------------------------------------");
		log.debug("checkIfRunning() {}",httpResponse.getStatusLine());
		Header[] headers = httpResponse.getAllHeaders();
		for (int i = 0; i < headers.length; i++) {
			log.debug("checkIfRunning() {}", headers[i]);
		}
		log.debug("checkIfRunning()----------------------------------------");

		String jsonString = null;
		if (entity != null) {
			jsonString = EntityUtils.toString(entity);
			log.debug("checkIfRunning() {}", jsonString);
		}
		if (null == jsonString) {
			status = false;
			throw new DScabiClientException("Response is null for checkIfRunning()", "MEA.VAE.1");
		}
		if (DMJsonHelper.isError(jsonString)) {
			status = false;
			throw new DScabiClientException("Unable to checkIfRunning. Error message : " + jsonString, "MEA.VAE.2");
		}
		if (false == DMJsonHelper.isOk(jsonString))
			status = false;
		else
			status = true;
		if (null != m_httpClient) { 
			m_httpClient.close();
			m_httpClient = null;
		}
		
		return status;
	
	}
		
}
