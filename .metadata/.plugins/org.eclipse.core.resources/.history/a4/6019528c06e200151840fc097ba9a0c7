/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 29-Feb-2016
 * File Name : ScabiClient2.java
 */
package com.dilmus.clientapp;

/**
 * @author Dilshad Mustafa
 *
 */

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeoutException;

import org.apache.http.*;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.client.DComputable;
import com.dilmus.dilshad.scabi.client.DCompute;
import com.dilmus.dilshad.scabi.client.DComputeSync;
import com.dilmus.dilshad.scabi.client.DComputeUnit;
import com.dilmus.dilshad.scabi.client.Dson;
import com.dilmus.dilshad.scabi.client.DMeta;
import com.dilmus.dilshad.scabi.client.DScabiClientException;
import com.dilmus.dilshad.scabi.client.async.DComputeAsync;
import com.dilmus.dilshad.scabi.client.async.DComputeNoBlock;
import com.dilmus.dilshad.scabi.common.DMClassLoader;
import com.dilmus.dilshad.scabi.common.DScabiException;
import com.dilmus.dilshad.scabi.common.DMUtil;

import java.math.*;
/**
 * @author Dilshad Mustafa
 *
 */


public class ScabiClient2 {

	
    public static void main(String[] args) throws IOException, ParseException, DScabiClientException, DScabiException, java.text.ParseException, NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException, InterruptedException, ExecutionException, TimeoutException {
        System.setProperty("org.slf4j.simpleLogger.showDateTime", "true");
        System.setProperty("org.slf4j.simpleLogger.showThreadName", "true");
        System.setProperty("org.slf4j.simpleLogger.levelInBrackets", "true");       
        System.setProperty("org.slf4j.simpleLogger.dateTimeFormat", "yyyy-MM-dd HH:mm:ss:SSS Z");
  		System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", "debug");		
  		System.setProperty("org.slf4j.simpleLogger.showLogName", "true");		
  		//System.setProperty("org.slf4j.simplelogger.defaultlog", "debug");
    	//System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "DEBUG");
  		final Logger log = LoggerFactory.getLogger(ScabiClient2.class);

    	System.out.println("ScabiClient");
    	DMeta meta = new DMeta("localhost", "4567");
    	//DComputeNoBlock cnba[] = meta.getComputeNoBlockMany(1);
    	//log.debug("cnba[0].toString() : {}", cnba[0].toString());
  		//DComputeNoBlock cnb = cnba[0];
        String action ="dao = new Dao(@localhost@, @27017@, @MetaDB@);" +
 					 	"dao.setTableName(@ComputeMetaDataTable@);" +
 					 	"jsonQuery = @{ @@Status@@ : @@Available@@, @@ComputePort@@ : @@4568@@ }@;" +
 					 	"jsonResult = dao.executeQuery(jsonQuery);" +
 					 	"return jsonResult;";
         /*
         Future<HttpResponse> future = cnb.executeCode(action);
         HttpResponse httpResponse = DComputeNoBlock.get(future);
         String result = DComputeNoBlock.getResult(httpResponse);
         log.debug("result : {}", result);
         */
     	long time1 = System.currentTimeMillis();
     	//String primeresult = cu2.compute(Dson.dummyDson());
     	//String primeresult = c.executeObject(cu2);
     	DComputeAsync c = new DComputeAsync(meta);
     	HashMap<String, String> out1 = new HashMap<String, String>();
     	HashMap<String, String> out2 = new HashMap<String, String>();
     	HashMap<String, String> out3 = new HashMap<String, String>();
     	HashMap<String, String> out4 = new HashMap<String, String>();
     	
    	DComputeUnit cu2 = new DComputeUnit() {
    		public List<Long> primes;
    		private boolean sieve[];

    		public void primeSieve(long max)
    		{
    	        primes = new ArrayList<Long>(); // Must include at least 2, 3.
    	        primes.add(2L);
    	        primes.add(3L);
    	        sieve = new boolean[(int)max + 1];
    	        for (Long p1  : primes) {
    	            long p = p1.longValue();
    	            
    	        	for (long i = p * p; i < sieve.length; i += p) 
    	        		sieve[(int)i] = true;
    	        
    	        }
    	     }

    	    public boolean extend()
    	    {
    	        long p = primes.get(primes.size() - 1) + 2;
    	        while (sieve[(int)p]) { 
    	        	p += 2;
    	        	if (p >= sieve.length) {
    	        		log.debug("sieve array index will exceed for p : {}", p);
    	        		return false;
    	        	}
    	        }
    	        for (long i = p * p; i < sieve.length; i += p) 
    	        	sieve[(int)i] = true;
    	        primes.add(p);
    	        return true;
    	    }
    	    /*
    		public String compute(Dson jsonInput) {
    			int totalunits = jsonInput.getTU();
    			int thisunit = jsonInput.getSU();
    			long p;
    			primeSieve(250000000L);
    			// while ((p = extend()) < 1000000L) ;
    			while(extend()) ;
    			p = primes.get(primes.size() - 1);
    			return "" + p;			
    		}
    		*/
    	    /*
    	    public String compute(Dson jsonInput) {
    			int totalunits = jsonInput.getTU();
    			int thisunit = jsonInput.getSU();
    			long sqr;
    			long i;
    			// takes 80 sec for 19 digits
    			long input = 9182237390125665823L; // 270000000L
    			
    			sqr = (long)Math.sqrt((double)input);
    			
    			if (input % 2L == 0)
    				return "false";
    			
    			for (i = 3; i <= sqr; i++ ) {
        			if (input % i == 0)
        				return "false";
    			}
    			
    			return "true";			
    		}
    		*/
    	    public BigInteger sqrt(BigInteger x) {
    	    	// Cannot use x.bitLength() if we are talking about millions of digits
    	        BigInteger div = BigInteger.ZERO.setBit(x.bitLength()/2);
    	        BigInteger div2 = div;
    	        // Loop until we hit the same value twice in a row, or wind
    	        // up alternating.
    	        for(;;) {
    	            BigInteger y = div.add(x.divide(div)).shiftRight(1);
    	            if (y.equals(div) || y.equals(div2))
    	                return y;
    	            div2 = div;
    	            div = y;
    	        }
    	    }
    	    /*
    	    public BigInteger sqrt(BigInteger n) {
    	    	  BigInteger a = BigInteger.ONE;
    	    	  BigInteger b = new BigInteger(n.shiftRight(5).add(new BigInteger("8")).toString());
    	    	  while(b.compareTo(a) >= 0) {
    	    	    BigInteger mid = new BigInteger(a.add(b).shiftRight(1).toString());
    	    	    if(mid.multiply(mid).compareTo(n) > 0) b = mid.subtract(BigInteger.ONE);
    	    	    else a = mid.add(BigInteger.ONE);
    	    	  }
    	    	  return a.subtract(BigInteger.ONE);
    	    }
    	    */
    	    
    		public String compute2(Dson jsonInput) {
    			int totalunits = jsonInput.getTU();
    			int thisunit = jsonInput.getCU();
    			Dson dson2 = null;
    			try {
    				dson2 = jsonInput.getInput();
    			} catch (Exception e) {
    				Dson.error(e.toString());
    			}
    			
    			System.out.println("totalunits : " + totalunits);
    			System.out.println("thisunit : " + thisunit);
    			System.out.println("dson2 : " + dson2);
    			
    	    	String sqr1 = sqrt(new BigInteger("4")).toString();
    	    	//log.debug("sqrt 4 : {}", sqr1);
    	    	System.out.println("sqrt 4 : " + sqr1);
    	    	String sqr2 = sqrt(new BigInteger("9")).toString();
    	    	//log.debug("sqrt 9 : {}", sqr2);
    	    	System.out.println("sqrt 9 : " + sqr2);
    	    	String sqr3 = sqrt(new BigInteger("256")).toString();
    	    	//log.debug("sqrt 256 : {}", sqr3);
    	    	System.out.println("sqrt 256 : " + sqr3);
    	    	
    			// 15 digits, Time taken : 3272, 3 sec
    			BigInteger input = new BigInteger("993960000099397");
    			
    			// 19 digits, Time taken : 294212, 5 min
    			//BigInteger input = new BigInteger("9182237390125665823"); // "5915587277", 270000000L
    			
    			// 30 digits, hours???
    			//BigInteger input = new BigInteger("671998030559713968361666935769");
    			
    			// 20 digits, Time taken : 1493298, 25 min
    	    	// 20 digits, Time taken : 1572848, 27 min
    			//BigInteger input = new BigInteger("71755440315342536873");
    			
    			// 20 digits, Time taken : 352399, 6 min
    	    	// 20 digits, Time taken : 356107, 6 min
    			//BigInteger input = new BigInteger("12764787846358441471");
    					
    			BigInteger two =new BigInteger("2");
    			BigInteger sqr;
    			BigInteger i;
    			
    			sqr = new BigInteger(sqrt(input).toString());
    	    	//log.debug("sqrt of input {} is : {}", input.toString(), sqr.toString());
    	    	System.out.println("sqrt of input " + input.toString() + " is " + sqr.toString());
    			if (input.remainder(two) == BigInteger.ZERO)
    				return "false";
    			i = new BigInteger("3");
    			while (true) {
    				//log.debug("i is now : {}", i.toString());
    				if (i.compareTo(sqr) >= 0)
    					break;
    				if (input.remainder(i) == BigInteger.ZERO)
        				return "false";
    				i = i.add(two);
    				
    			}
    			return "true";			
    		}
    	
    		public String compute(Dson jsonInput) {
    	    	long time1 = System.currentTimeMillis();

    			int totalunits = jsonInput.getTU();
    			int thisunit = jsonInput.getCU();
    			System.out.println("TU " + jsonInput.getTU());
    			Dson dson2 = null;
    			try {
    				dson2 = jsonInput.getInput();
    			} catch (Exception e) {
    				Dson.error(e.toString());
    			}
    			
    			System.out.println("totalunits : " + totalunits);
    			System.out.println("thisunit : " + thisunit);
    			System.out.println("dson2 : " + dson2);
    	    	
    			// 15 digits, Time taken : 3272, 3 sec
    			// 25 Compute Units, 630 millisec
    			// 15 CU, 2784 millisec, 2608 millisec
    			// 5 CU, Time taken : 1807, Time taken : 1995
    			// 2 CU, Time taken : 2358, Time taken : 2231, Time taken : 1883, Time taken : 1863
    			// 1 CS, 100 CU = 64 millisec, 50 CU = 108 millisec
    			BigInteger input = new BigInteger("993960000099397");
    			
    			// 19 digits, Time taken : 294212, 5 min
    			// 15 CU, 133276 msec, 134106 msec, 479180 msec, 480792 msec
    			// 5 CU, Time taken : 127583, Time taken : 124589
    			// 2 CU, Time taken : 156269, Time taken : 144161
    			//BigInteger input = new BigInteger("9182237390125665823"); // "5915587277", 270000000L
    			
    			// 30 digits, hours???
    			//BigInteger input = new BigInteger("671998030559713968361666935769");
    			
    			// 20 digits, Time taken : 1493298, 25 min
    	    	// 20 digits, Time taken : 1572848, 27 min
    			//BigInteger input = new BigInteger("71755440315342536873");
    			
    			// 20 digits, Time taken : 352399, 6 min
    	    	// 20 digits, Time taken : 356107, 6 min
    			//BigInteger input = new BigInteger("12764787846358441471");
    					
    			BigInteger two =new BigInteger("2");
    			BigInteger sqr;
    			BigInteger i;

    	    	// chunk = sqrt / TU
    	    	// (SU - 1) * chunk + 1 to SU * chunk

    			sqr = new BigInteger(sqrt(input).toString());
    	    	//log.debug("sqrt of input {} is : {}", input.toString(), sqr.toString());
    	    	System.out.println("sqrt of input " + input.toString() + " is " + sqr.toString());
    			if (input.remainder(two) == BigInteger.ZERO)
    				return "false";
    			i = new BigInteger("3");

    			BigInteger chunk = sqr.divide(new BigInteger("" + totalunits));
    			BigInteger start = new BigInteger("" + thisunit);
    			start = start.subtract(BigInteger.ONE);
    			start = start.multiply(chunk);
    			start = start.add(BigInteger.ONE);
    			
    			// if one, start from 3
    			if (start.compareTo(BigInteger.ONE) == 0)
    				start = i;
    			// make it odd number
    			if (start.remainder(two) == BigInteger.ZERO)
    				start = start.add(BigInteger.ONE);
    			
    			BigInteger stop = new BigInteger("" + thisunit);
    			stop = stop.multiply(chunk);
    			
    			i = start;
    			while (true) {
    				//log.debug("i is now : {}", i.toString());
    				if (i.compareTo(stop) > 0)
    					break;
    				if (input.remainder(i) == BigInteger.ZERO)
        				return "false";
    				i = i.add(two);
    				
    			}
    	    	long time2 = System.currentTimeMillis();
    	    	System.out.println("Time taken : " + (time2 - time1)); 

    			return "true";			
    		}
    	
    	
    	};

     	
     	//works c.executeObject(cu2).input(Dson.empty()).maxSplit(5000).output(out1);
    	//c.executeObject(cu2).input(Dson.empty()).maxSplit(100000).output(out1);
    	//c.executeObject(cu2).input(Dson.empty()).maxSplit(25).output(out1);
        //c.executeClass(CU.class).input(Dson.empty()).maxSplit(100).output(out2);
     	//c.executeClass(cu2.getClass()).input(Dson.empty()).maxSplit(2).output(out).perform();
     	//c.executeCode(action).input(Dson.empty()).maxSplit(7).output(out3);
     	
    	/*
       	c.executeObject(cu2).input(Dson.empty()).split(2).splitRange(2, 2).output(out1);
       	c.executeClass(CU.class).input(Dson.empty()).split(5).splitRange(4, 5).output(out2);
    	//c.executeClass(cu2.getClass()).input(Dson.empty()).maxSplit(2).output(out).perform();
    	c.executeCode(action).input(Dson.empty()).split(7).splitRange(3, 5).output(out3);
 		*/
    	c.perform();
     	c.finish();
 		//try {Thread.currentThread().sleep(20000);}
 		//catch (Exception e) { }
     	
     	if (out1.isEmpty())
     		System.out.println("out1 is empty");
     	Set<String> st1 = out1.keySet();
     	for (String s : st1) {
     		log.debug("out1 for s : {} value : {}", s, out1.get(s));
     		//System.out.println("out1 s : " + s + " value : " + out1.get(s));
     	}
     	
     	
        if (out2.isEmpty())
     		System.out.println("out2 is empty");
     	Set<String> st2 = out2.keySet();
     	for (String s : st2) {
     		log.debug("out2 for s : {} value : {}", s, out2.get(s));
     		
     	}
    	
        if (out3.isEmpty())
     		System.out.println("out3 is empty");
     	Set<String> st3 = out3.keySet();
     	for (String s : st3) {
     		log.debug("out3 for s : {} value : {}", s, out3.get(s));
     		
     	}
     	
     	
    	long time2 = System.currentTimeMillis();
    	//log.debug("prime number check result : {}", primeresult);

    	//log.debug("Last prime number : {}", primeresult);
    	log.debug("Time taken : {}", time2 - time1); 
		System.out.println("Time taken : " + (time2 - time1));

         
         
         
         
         meta.close();
         
    }
    
}
