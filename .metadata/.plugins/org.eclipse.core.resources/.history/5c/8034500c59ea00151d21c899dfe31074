/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 26-Jan-2016
 * File Name : ComputeMetaHelper.java
 */
package com.dilmus.dilshad.scabi.ms;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.bson.BasicBSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dilmus.dilshad.scabi.common.DMJson;
import com.dilmus.dilshad.scabi.common.DMUtil;
import com.dilmus.dilshad.scabi.common.DScabiException;
import com.dilmus.dilshad.scabi.common.DTable;
import com.dilmus.dilshad.scabi.db.DDB;
import com.dilmus.dilshad.scabi.db.DDocument;
import com.dilmus.dilshad.scabi.db.DResultSet;
import com.dilmus.dilshad.scabi.deprecated.DDBOld;
import com.dilmus.dilshad.scabi.deprecated.DObject;
import com.dilmus.dilshad.scabi.deprecated.DResultSetOld;
import com.dilmus.dilshad.scabi.deprecated.DTableOld;
import com.mongodb.DBObject;

/**
 * @author Dilshad Mustafa
 *
 */
public class DMComputeServerHelper {

	private final Logger log = LoggerFactory.getLogger(DMComputeServerHelper.class);
	private DDB m_ddb = null;
	private DTable m_table = null;

	public DMComputeServerHelper(DDB ddb) throws DScabiException {
		m_ddb = ddb;
		m_table = ddb.getTable("ComputeMetaDataTable");
	}

	public DMComputeServer register(String fullHostName, String port) throws DScabiException {
    	long n = 0;
		// Insert
    	DDocument document = new DDocument();
    	document.put("ComputeHost", fullHostName);
    	document.put("ComputePort", port);
    	
    	//DResultSet cursorExist = m_table.find(document);
    	n = m_table.count(document);
    	if (0 == n) {
    		System.out.println("Inside 0 == n");
	    	document.put("RegisteredDate", (new Date()).toString());
        	document.put("Status", "Available"); // Available, Inuse, Hold, Blocked
	    	document.put("StatusDate", (new Date()).toString());

	    	m_table.insert(document);
    	}
    	else
    		throw new DScabiException("ComputeHost, ComputePort already exists", "CMH.RER.1"); // already found or multiple matches
    	return new DMComputeServer(m_ddb, fullHostName, port);
	}

	public DMComputeServer register(String jsonString) throws DScabiException, IOException {
		DMJson djson = new DMJson(jsonString);
		return register(djson.getString("ComputeHost"), djson.getString("ComputePort"));
	}
	
	/* findOne() not available
	public DMComputeMeta alloc() throws DScabiException {

    	DDocument document = new DDocument();
    	document.put("Status", "Available");
    	
    	DObject dbc = m_table.findOne(document);
    	if (null == dbc)
    		throw new DScabiException("No ComputeHost with status as Available", "CMH.ALC.1");
    	log.debug("alloc() ComputeHost Alloc : {}", dbc.get("ComputeHost"));
    	log.debug("alloc() ComputePort Alloc : {}", dbc.get("ComputePort"));
    	return new DMComputeMeta(m_ddb, dbc.get("ComputeHost").toString(), dbc.get("ComputePort").toString());
	}
	*/
	
	public List<DMComputeServer> getMany(int howMany) throws DScabiException {
    	
    	DDocument document = new DDocument();
    	document.put("Status", "Available");
    	
    	DResultSet cursorExist = m_table.find(document);
    	if (0 == m_table.count(document))
    		throw new DScabiException("Zero ComputeHost with status as Available", "CMH.GMY.2");
    	if (null == cursorExist)
    		throw new DScabiException("result set is null. No ComputeHost with status as Available", "CMH.GMY.1");
    	int k = 0;
    	//DMComputeServer cma[] = new DMComputeServer[howMany];
    	List<DMComputeServer> cma = new ArrayList<DMComputeServer>();
	    while (cursorExist.hasNext()) {
	    	if (k >= howMany) {
	    		break;
	    	}
	    	DDocument ob = cursorExist.next();
	    	log.debug("getMany() result from ob {}", ob.toString());
			String f = ob.getString("ComputeHost");
			if (null == f) {
	    		throw new DScabiException("Field name " + "ComputeHost" + " doesn't exist in dbobject in dbcursor.", "CMH.GMY.3");
			}
	    	log.debug("getMany() ComputeHost : {}", f);
			String f2 = ob.getString("ComputePort");
			if (null == f2) {
	    		throw new DScabiException("Field name " + "ComputePort" + " doesn't exist in dbobject in dbcursor.", "CMH.GMY.4");
			}
	    	log.debug("getMany() ComputePort : {}", f2);
	    	//cma[k] = new DMComputeServer(m_ddb, f, f2);
	    	cma.add(new DMComputeServer(m_ddb, f, f2));
	    	k++;
	    }
	    /*
	    DMComputeServer cma2[] = new DMComputeServer[k];
    	for (int i = 0; i < k; i++) {
    		cma2[i] = cma[i];
    		log.debug("getMany() cma i={} : {}", cma[i]); 
    		log.debug("getMany() cma2 i={} : {}", cma2[i]); 
    		
    		
    	}
	    return cma2; 
	    */
	    return cma;
	}

	public List<DMComputeServer> getManyMayExclude(int howMany, String jsonStrExclude) throws DScabiException, IOException {
		
    	DDocument document = new DDocument();
    	document.put("Status", "Available");
    	
    	DResultSet cursorExist = m_table.find(document);
    	if (0 == m_table.count(document))
    		throw new DScabiException("Zero ComputeHost with status as Available", "CMH.GMY.2");
    	if (null == cursorExist)
    		throw new DScabiException("result set is null. No ComputeHost with status as Available", "CMH.GMY.1");
    	int k = 0;
    	long n = m_table.count(document);
    	//DMComputeServer cma[] = new DMComputeServer[(int)n];
    	List<DMComputeServer> cma = new ArrayList<DMComputeServer>();
	    while (cursorExist.hasNext()) {
	    	DDocument ob = cursorExist.next();
	    	log.debug("getMany() result from ob {}", ob.toString());
			String f = ob.getString("ComputeHost");
			if (null == f) {
	    		throw new DScabiException("Field name " + "ComputeHost" + " doesn't exist in dbobject in dbcursor.", "CMH.GMY.3");
			}
	    	log.debug("getMany() ComputeHost : {}", f);
			String f2 = ob.getString("ComputePort");
			if (null == f2) {
	    		throw new DScabiException("Field name " + "ComputePort" + " doesn't exist in dbobject in dbcursor.", "CMH.GMY.4");
			}
	    	log.debug("getMany() ComputePort : {}", f2);
	    	//cma[k] = new DMComputeServer(m_ddb, f, f2);
	    	cma.add(new DMComputeServer(m_ddb, f, f2));
	    	k++;
	    }
	    exclude(cma, jsonStrExclude);
	    while (cma.size() > howMany) {
	    	cma.remove(cma.size() - 1);
	    }
	    /*
	    DMComputeServer cma2[] = new DMComputeServer[k];
    	for (int i = 0; i < k; i++) {
    		cma2[i] = cma[i];
    		log.debug("getMany() cma i={} : {}", cma[i]); 
    		log.debug("getMany() cma2 i={} : {}", cma2[i]); 
    		
    		
    	}
	    return cma2; 
	    */
	    return cma;
	}
	
	public List<DMComputeServer> getAllAvailable() throws DScabiException {
		
    	// create a document to store key and value
    	DDocument document = new DDocument();
    	document.put("Status", "Available");
    	
    	DResultSet cursorExist = m_table.find(document);
    	if (0 == m_table.count(document))
    		throw new DScabiException("Zero ComputeHost with status as Available", "CMH.GMY.2");
    	if (null == cursorExist)
    		throw new DScabiException("result set is null. No Compute Host with status as Available", "CMH.GMY.1");
    	int k = 0;
    	long n = 0;
    	n = m_table.count(document);
    	log.debug("n : {}", n);
    	//DMComputeServer cma[] = new DMComputeServer[(int)n];
    	List<DMComputeServer> cma = new ArrayList<DMComputeServer>();
	    while (cursorExist.hasNext()) {
	    	DDocument ob = cursorExist.next();
	    	log.debug("getMany() result from ob {}", ob.toString());
			String f = ob.getString("ComputeHost");
			if (null == f) {
	    		throw new DScabiException("Field name " + "ComputeHost" + " doesn't exist in dbobject in dbcursor.", "CMH.GMY.3");
			}
	    	log.debug("getMany() ComputeHost : {}", f);
			String f2 = ob.getString("ComputePort");
			if (null == f2) {
	    		throw new DScabiException("Field name " + "ComputePort" + " doesn't exist in dbobject in dbcursor.", "CMH.GMY.4");
			}
	    	log.debug("getMany() ComputePort : {}", f2);
	    	//cma[k] = new DMComputeServer(m_ddb, f, f2);
	    	cma.add(new DMComputeServer(m_ddb, f, f2));
	    	k++;
	    }
	    /*
	    DMComputeServer cma2[] = new DMComputeServer[k];
    	for (int i = 0; i < k; i++) {
    		cma2[i] = cma[i];
    		log.debug("getMany() cma i={} : {}", cma[i]); 
    		log.debug("getMany() cma2 i={} : {}", cma2[i]); 
    		
    		
    	}
	    return cma2; 
	    */
	    return cma;
	}

	public int exclude(List<DMComputeServer> cma, String jsonStrExclude) throws IOException {
		DMJson dmjson = new DMJson(jsonStrExclude);
		Set<String> st = dmjson.keySet();
		
		for (DMComputeServer cm : cma) {
			for (String s : st) {
				if (cm.toString().equals(dmjson.getString(s))) {
					log.debug("cm.toString() : {}", cm.toString());
					log.debug("dmjson.getString(s) : {}", dmjson.getString(s));
					cma.remove(cm);
				}
			} // End for
		} // End for

		return 0;
	}
	
	public int removeAll() throws DScabiException {
		m_table.removeAll();
		return 0;
	}
	
	public int checkIfRunningAndRemove() throws DScabiException {
		//DMComputeServer cma[];
		List<DMComputeServer> cma = null;
		try {
		cma = getAllAvailable();
		} catch (DScabiException e) {
			//e.printStackTrace();
			return 0;
		}
		boolean status = false;
		for (DMComputeServer cm : cma) {
			try {
				status = cm.checkIfRunning();
			}  catch (Error | RuntimeException e) {
				//e.printStackTrace();
				cm.remove();
				continue;
			} catch (Exception e) {
				//e.printStackTrace();
				cm.remove();
				continue;
			} catch (Throwable e) {
				//e.printStackTrace();
				cm.remove();
				continue;
			}
			if (false == status) {
				cm.remove();
			}
			
		}
		
		return 0;
	}
}
