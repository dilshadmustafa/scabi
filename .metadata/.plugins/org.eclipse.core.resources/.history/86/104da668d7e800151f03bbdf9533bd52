/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 03-Feb-2016
 * File Name : DNamespaceHelper.java
 */
package com.dilmus.dilshad.scabi.common;

import java.io.IOException;
import java.util.Date;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Dilshad Mustafa
 *
 */
public class DMNamespaceHelper {

	final static Logger log = LoggerFactory.getLogger(DMNamespaceHelper.class);
	private DDB m_ddb = null;
	private DTable m_table = null;
	private DMDao m_ddao = null;
	
	public DMNamespaceHelper(DDB ddb) throws DScabiException { 
		m_ddb = ddb;
		if (false == ddb.tableExists("NamespaceTable")) {
			throw new DScabiException("Table name doesn't exist : NamespaceTable", "DNH.DNH.1");
		}
		m_table = ddb.getTable("NamespaceTable");
		m_ddao = new DMDao(ddb);
		m_ddao.setTableName("NamespaceTable");
	}
	
	public DMNamespace register(DMJson dmjson) throws DScabiException {

		if ( false == dmjson.contains("Type")) {
			throw new DScabiException("Type is not found", "DNH.RER.1");
		}
		if ( false == dmjson.contains("Namespace")) {
			throw new DScabiException("Namespace is not found", "DNH.RER.1");
		}
		if ( false == dmjson.contains("Host")) {
			throw new DScabiException("Host is not found", "DNH.RER.1");
		}
		if ( false == dmjson.contains("Port")) {
			throw new DScabiException("Port is not found", "DNH.RER.1");
		}
		if ( false == dmjson.contains("UserID")) {
			throw new DScabiException("UserID is not found", "DNH.RER.1");
		}
		if ( false == dmjson.contains("Pwd")) {
			throw new DScabiException("Pwd is not found", "DNH.RER.1");
		}
		if ( false == dmjson.contains("SystemSpecificName")) {
			throw new DScabiException("SystemSpecificName is not found", "DNH.RER.1");
		}
		if ( false == dmjson.contains("SystemType")) {
			throw new DScabiException("SystemType is not found", "DNH.RER.1");
		}
			
		DTable t = m_ddb.getTable("NamespaceTable");

    	long n = 0;
    	DDocument document = new DDocument();
    	document.put("Namespace", dmjson.getString("Namespace"));
   
    	n = m_table.count(document);
    	if (0 == n) {
    		System.out.println("Inside 0 == n");
    		String uuid1 = UUID.randomUUID().toString();

    		document.put("Type", dmjson.getString("Type"));
			document.put("Host", dmjson.getString("Host"));
 			document.put("Port", dmjson.getString("Port"));
 			document.put("UserID", dmjson.getString("UserID"));
			document.put("Pwd", dmjson.getString("Pwd"));
			document.put("SystemSpecificName", dmjson.getString("SystemSpecificName"));
			document.put("SystemType", dmjson.getString("SystemType"));
			document.put("SystemUUID", uuid1);
			document.put("RegisteredDate", (new Date()).toString());
			document.put("Status", uuid1);
			StatusDate
  	    	
 			\"Status\" : \"Available\", \"StatusDate\" : \"" + sdate + "\", \"SystemType\" : \"MetaServer\", \"SystemUUID\" : \"" + uuid1 + "\" }";

	    	m_table.insert(document);
    	}
    	else
    		throw new DScabiException("ComputeHost, ComputePort already exists", "CMH.RER.1"); // already found or multiple matches

		
		String uuid1 = UUID.randomUUID().toString();
		Date d= new Date();
		String sdate = d.toString();
		String jsonRow1 = "{ \"Type\" : \"MetaThis\", \"Namespace\" : \"MyOrg.Meta1\", \"Host\" : \"localhost\", \"Port\" : \"4567\", \"UserID\" : \"test\", \"Pwd\" : \"hello\", \"SystemSpecificName\" : \"MetaServer\", \"RegisteredDate\" : \"" + sdate + "\", \"Status\" : \"Available\", \"StatusDate\" : \"" + sdate + "\", \"SystemType\" : \"MetaServer\", \"SystemUUID\" : \"" + uuid1 + "\" }";

		String jsonCheck = "{ \"Namespace\" : \"1\" }";
		
		t.insertRow(jsonRow1, jsonCheck);
	
		
		
	}
	
	public DMNamespace getNamespace(String strNamespace) throws IOException, DScabiException {
		String jsonQuery = "{ \"Namespace\" : \"" + strNamespace + "\" }";
		String jsonResult = m_ddao.executeQuery(jsonQuery);
		
		DMJson djson = new DMJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No entry found for namespace : " + strNamespace, "DNH.GMT.1");
		}
		else if (n > 1) {
    		throw new DScabiException("Multiple entries found for namespace : " + strNamespace, "DNH.GMT.2");
		}

		String jsonString = djson.getString("1");
		DMJson djson2 = new DMJson(jsonString);
		
		return new DMNamespace(djson2);

		/*
		switch(metaType) {
			case "MetaThis" : return getMetaThis(nameSpace);
			case "MetaRemote" : return getMetaRemote(nameSpace);
			case "AppTable" : return getAppTable(nameSpace);
			case "JavaFile" : return getJavaFile(nameSpace);
			case "File" : return getFile(nameSpace);
			default : throw new DScabiException("Invalid meta type : " + metaType, "DNH.GNE.1");
		}
		*/
		
	}
	
	public DMNamespace getNamespaceByJsonStrQuery(String jsonStrQuery) throws IOException, DScabiException {
		String jsonResult = m_ddao.executeQuery(jsonStrQuery);
		
		DMJson djson = new DMJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No entry found for namespace query : " + jsonStrQuery, "DNH.GMT.1");
		}
		else if (n > 1) {
    		throw new DScabiException("Multiple entries found for namespace query : " + jsonStrQuery, "DNH.GMT.2");
		}

		String jsonString = djson.getString("1");
		DMJson djson2 = new DMJson(jsonString);
		
		return new DMNamespace(djson2);
		
	}

	public DMNamespace findOneNamespace(String metaType) throws IOException, DScabiException {
		
		String type = metaType;
		String jsonQuery = "{ \"Type\" : \"" + type + "\" }";
		String jsonResult = m_ddao.executeQuery(jsonQuery);
		
		DMJson djson = new DMJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No entry for type " + type + " found for any namespace", "DNH.GFN.1");
		}

		String jsonString = djson.getString("1");
		DMJson djson2 = new DMJson(jsonString);
		
		return new DMNamespace(djson2);
	}
	
	/*
	public DNamespace getMetaThis(String nameSpace) throws IOException, DScabiException {
		
		String type = "MetaThis";
		String jsonQuery = "{ \"Type\" : \"" + type + "\", \"Namespace\" : \"" + nameSpace + "\" }";
		String jsonResult = ddao.executeQuery(jsonQuery);
		
		DJson djson = new DJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No type " + type + " found for namespace : " + nameSpace, "DNH.GMT.1");
		}
		else if (n > 1) {
    		throw new DScabiException("Multiple type " + type + " found for namespace : " + nameSpace, "DNH.GMT.2");
		}

		String jsonString = djson.getString("1");
		DJson djson2 = new DJson(jsonString);
		
		return new DNamespace(djson2);
	}
	*/
	
	/*
	public DNamespace getMetaRemote(String nameSpace) throws IOException, DScabiException {
		
		String type = "MetaRemote";
		String jsonQuery = "{ \"Type\" : \"" + type + "\", \"Namespace\" : \"" + nameSpace + "\" }";
		String jsonResult = ddao.executeQuery(jsonQuery);
		
		DJson djson = new DJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No type " + type + " found for namespace : " + nameSpace, "DNH.GMR.1");
		}
		else if (n > 1) {
    		throw new DScabiException("Multiple type " + type + " found for namespace : " + nameSpace, "DNH.GMR.2");
		}

		String jsonString = djson.getString("1");
		DJson djson2 = new DJson(jsonString);
		
		return new DNamespace(djson2);
	}
	*/
	
	/*
	public DNamespace getAppTable(String nameSpace) throws IOException, DScabiException {
		
		String type = "AppTable";
		String jsonQuery = "{ \"Type\" : \"" + type + "\", \"Namespace\" : \"" + nameSpace + "\" }";
		String jsonResult = ddao.executeQuery(jsonQuery);
		
		DJson djson = new DJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No type " + type + " found for namespace : " + nameSpace, "DNH.GAT.1");
		}
		else if (n > 1) {
    		throw new DScabiException("Multiple type " + type + " found for namespace : " + nameSpace, "DNH.GAT.2");
		}

		String jsonString = djson.getString("1");
		DJson djson2 = new DJson(jsonString);
		
		return new DNamespace(djson2);
	}
	*/
	
	/*
	public DNamespace getJavaFile(String nameSpace) throws IOException, DScabiException {
		
		String type = "JavaFile";
		String jsonQuery = "{ \"Type\" : \"" + type + "\", \"Namespace\" : \"" + nameSpace + "\" }";
		String jsonResult = ddao.executeQuery(jsonQuery);
		
		DJson djson = new DJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No type " + type + " found for namespace : " + nameSpace, "DNH.GJF.1");
		}
		else if (n > 1) {
    		throw new DScabiException("Multiple type " + type + " found for namespace : " + nameSpace, "DNH.GJF.2");
		}

		String jsonString = djson.getString("1");
		DJson djson2 = new DJson(jsonString);
		
		return new DNamespace(djson2);
	}
	*/
	
	/*
	public DNamespace getFile(String nameSpace) throws IOException, DScabiException {
		
		String type = "File";
		String jsonQuery = "{ \"Type\" : \"" + type + "\", \"Namespace\" : \"" + nameSpace + "\" }";
		String jsonResult = ddao.executeQuery(jsonQuery);
		
		DJson djson = new DJson(jsonResult);
		String count = djson.getString("Count");
		int n = Integer.parseInt(count);
		
		if (0 == n) {
    		throw new DScabiException("No type " + type + " found for namespace : " + nameSpace, "DNH.GFE.1");
		}
		else if (n > 1) {
    		throw new DScabiException("Multiple type " + type + " found for namespace : " + nameSpace, "DNH.GFE.2");
		}

		String jsonString = djson.getString("1");
		DJson djson2 = new DJson(jsonString);
		
		return new DNamespace(djson2);
	}
	*/
}

