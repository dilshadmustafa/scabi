/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 11-Feb-2016
 * File Name : DBackFile.java
 */
package com.dilmus.scabi.common;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Set;
import java.util.TimeZone;

import org.bson.BasicBSONObject;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.gridfs.GridFSBucket;
import com.mongodb.client.gridfs.GridFSBuckets;
import com.mongodb.client.gridfs.GridFSDownloadStream;
import com.mongodb.client.gridfs.GridFSUploadStream;
import com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions;
import com.mongodb.client.gridfs.model.GridFSUploadOptions;

/**
 * @author Dilshad Mustafa
 *
 */
public class DBackFile {

	final static Logger log = LoggerFactory.getLogger(DBackTable.class);

	private DBackDB m_ddb = null;
	private MongoDatabase m_mongodb = null;
    private GridFSBucket m_gridFSBucket = null;
    private GridFSUploadOptions m_options = null;
    private boolean m_firstTime = true;
	private int m_chunkSize = 0; // Bytes
	private int m_bufferSize = 0; // Bytes
    private DBCollection m_table = null;
	
	public DBackFile(DBackDB ddb) {
		m_ddb = ddb;
		m_mongodb = ddb.getDatabase();
		m_firstTime = true;
		m_chunkSize = 1024*1024;
		m_bufferSize = 64*1024*1024;

	   	m_table = m_ddb.getDB().getCollection("fs.files");

	}
	
	public int setBufferSize(int bufferSize) {
		m_bufferSize = bufferSize;
		return 0;
	}
	
	public int updateMetaData(String fileName, ObjectId fileID) throws IOException, DScabiException, ParseException {
		int n = 0;
		String uploadDate = null;
		Date datefromDB = null;
		
		BasicDBObject documentWhere = new BasicDBObject();
    	documentWhere.put("_id", fileID);

	   	DBCursor cursorExist = m_table.find(documentWhere);
    	n = cursorExist.count();
    	if (1 == n) {
			log.debug("updateMetaData() Inside 1 == n");
			while (cursorExist.hasNext()) {
		    	DBObject ob = cursorExist.next();
		    	log.debug("updateMetaData() result from ob {}", ob.toString());
		    	//datefromDB = (String) ((BasicBSONObject) ob).getString("uploadDate");
		    	datefromDB = ((BasicBSONObject)ob).getDate("uploadDate");
		    	if (null == datefromDB) {
					throw new DScabiException("updateMetaData() Unable to get uploadDate for file : " + fileName + " fileID : " + fileID.toHexString(), "DBF.UMD.1");
				}
				log.debug("datefromDB : {}", datefromDB);
			
			}

    	}  else if (0 == n) {
			log.debug("updateMetaData() No matches for file : " + fileName + " fileID : " + fileID.toHexString());
			throw new DScabiException("updateMetaData() No matches for file : " + fileName + " fileID : " + fileID.toHexString(), "DBF.UMD.1");
    	} else {
			log.debug("updateMetaData() Multiple matches for file : " + fileName + " fileID : " + fileID.toHexString());
			throw new DScabiException("updateMetaData() Multiple matches for file : " + fileName + " fileID : " + fileID.toHexString(), "DBF.UMD.1");
    	}

    	
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        dateFormat.setTimeZone(TimeZone.getTimeZone("ISO"));
        String putClientDateTime = dateFormat.format(date);
        // To parse from string : Date date2 = dateFormatGmt.parse(putDateTime);
        // Uses java.time java 8 : ZonedDateTime now = ZonedDateTime.now( ZoneOffset.UTC );	        
        String millisTime = "" + System.currentTimeMillis();
        String nanoTime = "" + System.nanoTime();

        /*
        SimpleDateFormat dateFormatFromDB = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        dateFormatFromDB.setTimeZone(TimeZone.getTimeZone("ISO"));

		CharSequence cs1 = "T";
		CharSequence cs2 = "Z";
		String s1 = datefromDB.replace(cs1, " ");
		String s2 = s1.replace(cs2, "");

		Date date2 = dateFormatFromDB.parse(s2);
        uploadDate = dateFormat.format(date2);
        */
        uploadDate = dateFormat.format(datefromDB);
        log.debug("uploadDate : {}", uploadDate);
        
        BasicDBObject documentUpdate = new BasicDBObject();
        documentUpdate.append("PutFileName", fileName);
        documentUpdate.append("PutServerUploadDateTime", uploadDate);
        documentUpdate.append("PutType", "File");
		documentUpdate.append("PutContentType", "File");
		documentUpdate.append("PutClientDateTime", putClientDateTime);
		documentUpdate.append("PutClientDateTimeInMillis", millisTime);
		documentUpdate.append("PutClientDateTimeInNano", nanoTime);	
    	documentUpdate.append("PutStatus", "Completed");
    	documentUpdate.append("PutLatestNumber", "1");
	
	   	BasicDBObject updateObj = new BasicDBObject();
	   	updateObj.put("$set", documentUpdate);

	   	WriteResult result = m_table.update(documentWhere, updateObj);
	   	if (1 != result.getN())
			throw new DScabiException("Update meta data failed for file : " + fileName + " fileID : " + fileID.toHexString(), "DBF.UMD.1");
		return result.getN();
	
	}

	public boolean isValidMetaData(String fileName, ObjectId fileID) throws IOException, DScabiException {
		int n = 0;

        BasicDBObject documentQuery = new BasicDBObject();
    	documentQuery.put("_id", fileID);
        documentQuery.append("PutStatus", "Completed");

	   	DBCursor cursorExist = m_table.find(documentQuery);
    	n = cursorExist.count();
    	if (1 == n) {
			log.debug("isValidMetaData() Inside 1 == n");
			return true;
			/*
			while (cursorExist.hasNext()) {
		    	DBObject ob = cursorExist.next();
		    	log.debug("isValidMetaData() result from ob {}", ob.toString());
				String f = (String) ((BasicBSONObject) ob).getString("PutStatus");
				if (null == f) {
					throw new DScabiException("Update meta data failed for file : " + fileName + " fileID : " + fileID.toHexString(), "DBF.UMD.1");
				}
			}
			*/
    	}  else if (0 == n) {
			//log.debug("isValidMetaData() No matches for file : " + fileName + " fileID : " + fileID.toHexString());
			//throw new DScabiException("isValidMetaData() No matches for file : " + fileName + " fileID : " + fileID.toHexString(), "DBF.UMD.1");
			return false;
    	} else {
			//log.debug("isValidMetaData() Multiple matches for file : " + fileName + " fileID : " + fileID.toHexString());
			//throw new DScabiException("isValidMetaData() Multiple matches for file : " + fileName + " fileID : " + fileID.toHexString(), "DBF.UMD.1");
			return false;
    	}
	
	}
	
	public long put(String fileName, String fullFilePath) throws IOException, DScabiException, ParseException {
		long time1;
		long time2;
		int n = 0;
		long total = 0;
		
		if (m_firstTime) {
			m_gridFSBucket = GridFSBuckets.create(m_mongodb);
	        
	        // Create some custom options
			Document doc = new Document();
			doc.append("Type", "File");
			doc.append("ContentType", "File");
			
			m_options = new GridFSUploadOptions()
	                .chunkSizeBytes(m_chunkSize)
	                .metadata(doc);
	        
	        m_firstTime = false;
		}
		
        // Get the input stream
        time1 = System.currentTimeMillis();
        InputStream fromStream = new FileInputStream(fullFilePath);

        byte data[] = new byte[m_bufferSize];
        GridFSUploadStream uploadStream = m_gridFSBucket.openUploadStream(fileName, m_options);

        while ((n = fromStream.read(data)) > 0) {
            uploadStream.write(data, 0, n);
            total = total + n;
        }
        uploadStream.close();
        fromStream.close();
        
        updateMetaData(fileName, uploadStream.getFileId());
        
        time2 = System.currentTimeMillis();
        
        log.debug("put() The fileId of the uploaded file is: " + uploadStream.getFileId().toHexString());
        log.debug("put() Upload time taken : time2 - time1 : " + (time2 - time1));
		
		return total;
	}

	public long put(String fileName, InputStream fromStream) throws IOException, DScabiException {
		long time1;
		long time2;
		int n = 0;
		long total = 0;
		
		if (m_firstTime) {
			m_gridFSBucket = GridFSBuckets.create(m_mongodb);

	        // Create some custom options
			Document doc = new Document();
			doc.append("Type", "File");
			doc.append("ContentType", "File");
			
	        // Create some custom options
			m_options = new GridFSUploadOptions()
	                .chunkSizeBytes(m_chunkSize)
	                .metadata(doc);
			m_firstTime = false;
		}
		
        // Get the input stream
        time1 = System.currentTimeMillis();

        byte data[] = new byte[m_bufferSize];
        GridFSUploadStream uploadStream = m_gridFSBucket.openUploadStream(fileName, m_options);

        while ((n = fromStream.read(data)) > 0) {
            uploadStream.write(data, 0, n);
            total = total + n;
        }
        uploadStream.close();
        fromStream.close();
        
        time2 = System.currentTimeMillis();

        log.debug("put() The fileId of the uploaded file is: " + uploadStream.getFileId().toHexString());
        log.debug("put() Upload time taken : time2 - time1 : " + (time2 - time1));
		
		return total;
	}
	
	public long get(String fileName, String fullFilePath) throws IOException, DScabiException {
		long time1;
		long time2;
		int n = 0;
		long total = 0;
		
		if (m_firstTime) {
			m_gridFSBucket = GridFSBuckets.create(m_mongodb);
	
	        // Create some custom options
			Document doc = new Document();
			doc.append("Type", "File");
			doc.append("ContentType", "File");
			
	        // Create some custom options
			m_options = new GridFSUploadOptions()
	                .chunkSizeBytes(m_chunkSize)
	                .metadata(doc);
			m_firstTime = false;
		}
		
        time1 = System.currentTimeMillis();
        GridFSDownloadByNameOptions downloadOptions = new GridFSDownloadByNameOptions().revision(-1); // latest file

        GridFSDownloadStream downloadStream = m_gridFSBucket.openDownloadStreamByName(fileName, downloadOptions);
        ObjectId fileID = downloadStream.getGridFSFile().getObjectId();
        log.debug("put() file id : " + downloadStream.getGridFSFile().getId().toString());

        if (false == isValidMetaData(fileName, fileID)) {
        	log.debug("get() latest file doesn't have PutStatus as Completed"); 
        	downloadStream.close();
            downloadOptions.revision(-2); // prior version to latest file
            try {
            	downloadStream = m_gridFSBucket.openDownloadStreamByName(fileName, downloadOptions);
            }
            catch (Exception e) {
            	throw new DScabiException("get() No matches with valid meta data PutStatus=Completed, No second latest also, for file : " + fileName, "DBF.UMD.2");
            }
            
            ObjectId fileID2 = downloadStream.getGridFSFile().getObjectId();
            log.debug("put() file id : " + downloadStream.getGridFSFile().getId().toString());
            if (false == isValidMetaData(fileName, fileID2)) {
            	downloadStream.close();
            	throw new DScabiException("get() No matches with valid meta data PutStatus=Completed for file : " + fileName, "DBF.UMD.1");
            }
        }

        FileOutputStream toStream = new FileOutputStream(fullFilePath);

        //long fileLength = downloadStream.getGridFSFile().getLength();
        byte[] bytesToWriteTo = new byte[m_bufferSize];
        
        while ((n = downloadStream.read(bytesToWriteTo)) > 0) {
        	toStream.write(bytesToWriteTo, 0, n);
        	total = total + n;
        }
        downloadStream.close();
        toStream.close();
        
        time2 = System.currentTimeMillis();
        log.debug("get() Download time taken : time2 - time1 : " + (time2 - time1));
		
		return total;
	}

	public long get(String fileName, OutputStream toStream) throws IOException, DScabiException {
		long time1;
		long time2;
		int n = 0;
		long total = 0;
		
		if (m_firstTime) {
			m_gridFSBucket = GridFSBuckets.create(m_mongodb);

	        // Create some custom options
			Document doc = new Document();
			doc.append("Type", "File");
			doc.append("ContentType", "File");
			
	        // Create some custom options
			m_options = new GridFSUploadOptions()
	                .chunkSizeBytes(m_chunkSize)
	                .metadata(doc);
			m_firstTime = false;
		}
		
        time1 = System.currentTimeMillis();
        GridFSDownloadByNameOptions downloadOptions = new GridFSDownloadByNameOptions().revision(-1);

        GridFSDownloadStream downloadStream = m_gridFSBucket.openDownloadStreamByName(fileName, downloadOptions);
        //long fileLength = downloadStream.getGridFSFile().getLength();
        byte[] bytesToWriteTo = new byte[m_bufferSize];
        
        while ((n = downloadStream.read(bytesToWriteTo)) > 0) {
        	toStream.write(bytesToWriteTo, 0, n);
        	total = total + n;
        }
        downloadStream.close();
        toStream.close();
        
        time2 = System.currentTimeMillis();
        log.debug("get() Download time taken : time2 - time1 : " + (time2 - time1));
		
		return total;
	}

	
}
