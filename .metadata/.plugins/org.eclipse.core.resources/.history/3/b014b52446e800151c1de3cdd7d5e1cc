import java.io.IOException;

import org.apache.http.ParseException;

import com.dilmus.dilshad.scabi.client.DMeta;
import com.dilmus.dilshad.scabi.client.DScabiClientException;
import com.dilmus.dilshad.scabi.client.Dao;
import com.dilmus.dilshad.scabi.common.DDB;
import com.dilmus.dilshad.scabi.common.DDocument;
import com.dilmus.dilshad.scabi.common.DResultSet;
import com.dilmus.dilshad.scabi.common.DScabiException;
import com.dilmus.dilshad.scabi.common.DTable;
import com.dilmus.dilshad.scabi.deprecated.DTableOld;

import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.and;
import static com.mongodb.client.model.Filters.or;


/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 10-Mar-2016
 * File Name : Example3.java
 */

/**
 * @author Dilshad Mustafa
 *
 */
public class Example3 {

	public static void main(String args[]) throws IOException, ParseException, DScabiClientException, DScabiException, java.text.ParseException {
		DMeta meta = new DMeta("localhost", "5000");
		Dao dao = new Dao(meta);
		
		// The below examples demonstrate CRUD example
		
		// Create Table
		try {
			DTable t = dao.createTable("scabi:MyOrg.MyTables:Table1");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// Get existing Table
		DTable table = dao.getTable("scabi:MyOrg.MyTables:Table1");
		
		// Insert data
		try {
			DDocument d = new DDocument();
			d.append("EmployeeName", "Karthik").append("EmployeeNumber", "3000").append("Age",  40);
			table.insert(d);
			
			d.clear();
			d.append("EmployeeName", "Jayaprakash").append("EmployeeNumber", "3001").append("Age",  35);

			d.clear();
			d.append("EmployeeName", "Balaji").append("EmployeeNumber", "3002").append("Age",  30);

			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		/*
		DDocument d = new DDocument();
		d.append("EmployeeName", "Tester1").append("EmployeeNumber", "3002");
		table.insert(d);

		
  	    DDocument newDocument = new DDocument();
	   	newDocument.put("EmployeeName", "Tester1New"); // Available, Inuse, Hold, Blocked
	   	DDocument updateObj = new DDocument();
	   	updateObj.put("$set", newDocument);
		table.update(eq("EmployeeName", "Tester1"), updateObj);
		 */
		
		// Directly embed Mongo queries using filters and, or, lt, gt, etc.
		DResultSet result = table.find(or(eq("EmployeeName", "Tester1New"), eq("EmployeeName", "Pradeep")));
		while (result.hasNext()) {
			System.out.println("result : " + result.next());
		}
		
		/*
		String jsonRow1 = "{ \"EmployeeName\" : \"Rajesh Kumar\", \"EmployeeNumber\" : \"3000\" }";
		String jsonRow2 = "{ \"EmployeeName\" : \"Pradeep\", \"EmployeeNumber\" : \"3001\" }";
		String jsonCheck = "{ \"EmployeeName\" : \"Pradeep\", \"EmployeeNumber\" : \"0\" }";
		
		table.insertRow(jsonRow1, jsonCheck);
		table.insertRow(jsonRow2, jsonCheck);
		 */
		//collection.find(and(eq("x", 1), lt("y", 3)));
		//String jsonResult = table.find(eq("EmployeeName", "Pradeep"));
		
		//System.out.println(jsonResult);

		
		/*
		String jsonQuery = "{ \"EmployeeNumber\" : \"3000\" }";
		String jsonResult2 = table.executeQuery(jsonQuery);
		
		System.out.println(jsonResult2);
	*/
		//============
		


		dao.close();
		meta.close();
		
		
		
	}
	
	
}
