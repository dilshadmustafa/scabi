/**
 * @author Dilshad Mustafa
 * (c) Dilshad Mustafa
 * All Rights Reserved.
 * @version 1.0
 * @since 11-Feb-2016
 * File Name : DBackend.java
 */
package com.dilmus.scabi.common;

import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.MapReduceCommand;
import com.mongodb.MapReduceOutput;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoIterable;

/**
 * @author Dilshad Mustafa
 *
 */
public class DBackDB {

	final static Logger log = LoggerFactory.getLogger(DBackDB.class);
	
	private MongoClient mongo = null;
	private MongoDatabase mongodb = null;
	private DB db = null;
	
	private String dbHost = null;
	private String dbPort = null;
	private String dbName = null;
	
	public DBackDB(String dbHost, String dbPort, String dbName) {
		
		mongo = new MongoClient(dbHost, Integer.parseInt(dbPort));
		mongodb = mongo.getDatabase(dbName);
		db = new DB(mongo, dbName);
		
		this.dbHost = dbHost;
		this.dbPort = dbPort;
		this.dbName = dbName;
	}
	
	/*
	public boolean collectionExists(String tableName) {
	    MongoIterable<String> collectionNames = mongodb.listCollectionNames();
	    for (String name : collectionNames) {
	        if (name.equalsIgnoreCase(tableName)) {
	            return true;
	        }
	    }
	    return false;
	}
	*/
	
	public boolean collectionExists(String tableName) {
	    return db.collectionExists(tableName);
	}
	
	public DBackTable getTable(String tableName) throws DScabiException {
		if (null == tableName) {
			throw new DScabiException("Table name is null", "DBD.GTE.1");
		}
		if (false == db.collectionExists(tableName)) {
			throw new DScabiException("Table name doesn't exist : " + tableName, "DBD.GTE.2");
		}
		DBCollection collection = db.getCollection(tableName);
		return new DBackTable(collection);
	}

	public DBackTable createTable(String tableName) throws DScabiException {
		DBCollection collection = null;
		if (null == tableName) {
			throw new DScabiException("Table name is null", "DBD.CTE.1");
		}
		if (false == db.collectionExists(tableName)) {
			log.debug("Table doesn't exist : {}. So creating", tableName);
			collection = db.createCollection(tableName, null);
		}
		else
			collection = db.getCollection(tableName);
		return new DBackTable(collection);
	}

	public ArrayList<String> fieldNames(DBackTable table) throws DScabiException {
		if (null == table) {
			throw new DScabiException("Table is null", "DBD.FNS.1");
		}
		String map = "function() { for (var key in this) { emit(key, null); } }";
		String reduce = "function(key, stuff) { return null; }";
			
		MapReduceCommand cmd = new MapReduceCommand(table.getCollection(), map, reduce,
				   	     null, MapReduceCommand.OutputType.INLINE, null);
		MapReduceOutput out = table.getCollection().mapReduce(cmd);
		//if 4th param output collection name is used above, String s = out.getOutputCollection().distinct("_id").toString();
		//if 4th param output collection name is used above, System.out.println("out.getOutputCollection().distinct " + s);
		ArrayList<String> fieldNames = new ArrayList();
		for (DBObject o : out.results()) {
		    log.debug("fieldNames() Key, value is : {}", o.toString());
		    log.debug("fieldNames() Key name is : {}", o.get("_id").toString());
		    if (o.get("_id").toString().equals("_id") == false)
		    	fieldNames.add(o.get("_id").toString());
		}			
		return fieldNames;
		// Field names : [Status, ComputePort, ComputeHost, RegisteredDate, _id]
		// { "_id" : { "$oid" : "56a5ea6552aeac08b01f8a6e"} , "ComputeHost" : "localhost" , "ComputePort" : "4568" , "RegisteredDate" : { "$date" : "2016-01-25T09:27:01.031Z"} , "Status" : "Available"}
		
		// Field names : [ComputeHost, ComputePort, RegisteredDate, Status]
		// fieldNames() Key, value is : { "_id" : "ComputeHost" , "value" :  null }
		// fieldNames() Key name is : ComputeHost
		// fieldNames() Key, value is : { "_id" : "ComputePort" , "value" :  null }
		// fieldNames() Key name is : ComputePort
		// fieldNames() Key, value is : { "_id" : "RegisteredDate" , "value" :  null }
		// fieldNames() Key name is : RegisteredDate
		// fieldNames() Key, value is : { "_id" : "Status" , "value" :  null }
		// fieldNames() Key name is : Status
		// fieldNames() Key, value is : { "_id" : "_id" , "value" :  null }
		// fieldNames() Key name is : _id
	
	}

}
